<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1334" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1317.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1317.00"> </text><svg id="frames" x="10" width="1180"><g><title>__vdso_clock_gettime (9 samples, 0.20%)</title><rect x="0.2417%" y="997" width="0.1978%" height="15" fill="rgb(227,0,7)"/><text x="0.4917%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::update_date (21 samples, 0.46%)</title><rect x="0.0000%" y="1141" width="0.4614%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="1151.50"></text></g><g><title>hyper::proto::h1::date::update (21 samples, 0.46%)</title><rect x="0.0000%" y="1125" width="0.4614%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="1135.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.46%)</title><rect x="0.0000%" y="1109" width="0.4614%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="1119.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.46%)</title><rect x="0.0000%" y="1093" width="0.4614%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="1103.50"></text></g><g><title>hyper::proto::h1::date::update::{{closure}} (19 samples, 0.42%)</title><rect x="0.0439%" y="1077" width="0.4175%" height="15" fill="rgb(232,128,0)"/><text x="0.2939%" y="1087.50"></text></g><g><title>hyper::proto::h1::date::CachedDate::check (19 samples, 0.42%)</title><rect x="0.0439%" y="1061" width="0.4175%" height="15" fill="rgb(207,160,47)"/><text x="0.2939%" y="1071.50"></text></g><g><title>time::get_time (19 samples, 0.42%)</title><rect x="0.0439%" y="1045" width="0.4175%" height="15" fill="rgb(228,23,34)"/><text x="0.2939%" y="1055.50"></text></g><g><title>time::sys::inner::unix::get_time (16 samples, 0.35%)</title><rect x="0.1099%" y="1029" width="0.3516%" height="15" fill="rgb(218,30,26)"/><text x="0.3599%" y="1039.50"></text></g><g><title>__GI___clock_gettime (15 samples, 0.33%)</title><rect x="0.1318%" y="1013" width="0.3296%" height="15" fill="rgb(220,122,19)"/><text x="0.3818%" y="1023.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::try_keep_alive (6 samples, 0.13%)</title><rect x="0.5493%" y="1093" width="0.1318%" height="15" fill="rgb(250,228,42)"/><text x="0.7993%" y="1103.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (6 samples, 0.13%)</title><rect x="0.5493%" y="1077" width="0.1318%" height="15" fill="rgb(240,193,28)"/><text x="0.7993%" y="1087.50"></text></g><g><title>hyper::proto::h1::conn::State::idle (6 samples, 0.13%)</title><rect x="0.5493%" y="1061" width="0.1318%" height="15" fill="rgb(216,20,37)"/><text x="0.7993%" y="1071.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (9 samples, 0.20%)</title><rect x="0.7251%" y="1077" width="0.1978%" height="15" fill="rgb(206,188,39)"/><text x="0.9751%" y="1087.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (9 samples, 0.20%)</title><rect x="0.7251%" y="1061" width="0.1978%" height="15" fill="rgb(217,207,13)"/><text x="0.9751%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (9 samples, 0.20%)</title><rect x="0.7251%" y="1045" width="0.1978%" height="15" fill="rgb(231,73,38)"/><text x="0.9751%" y="1055.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (9 samples, 0.20%)</title><rect x="0.7251%" y="1029" width="0.1978%" height="15" fill="rgb(225,20,46)"/><text x="0.9751%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.20%)</title><rect x="0.7251%" y="1013" width="0.1978%" height="15" fill="rgb(210,31,41)"/><text x="0.9751%" y="1023.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.20%)</title><rect x="0.7251%" y="997" width="0.1978%" height="15" fill="rgb(221,200,47)"/><text x="0.9751%" y="1007.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_buf (5 samples, 0.11%)</title><rect x="0.9229%" y="1077" width="0.1099%" height="15" fill="rgb(226,26,5)"/><text x="1.1729%" y="1087.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_buf (5 samples, 0.11%)</title><rect x="0.9229%" y="1061" width="0.1099%" height="15" fill="rgb(249,33,26)"/><text x="1.1729%" y="1071.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (20 samples, 0.44%)</title><rect x="0.6812%" y="1093" width="0.4395%" height="15" fill="rgb(235,183,28)"/><text x="0.9312%" y="1103.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (30 samples, 0.66%)</title><rect x="0.4834%" y="1125" width="0.6592%" height="15" fill="rgb(221,5,38)"/><text x="0.7334%" y="1135.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (30 samples, 0.66%)</title><rect x="0.4834%" y="1109" width="0.6592%" height="15" fill="rgb(247,18,42)"/><text x="0.7334%" y="1119.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (22 samples, 0.48%)</title><rect x="1.2964%" y="1109" width="0.4834%" height="15" fill="rgb(241,131,45)"/><text x="1.5464%" y="1119.50"></text></g><g><title>hyper::body::body::Sender::poll_want (21 samples, 0.46%)</title><rect x="1.3184%" y="1093" width="0.4614%" height="15" fill="rgb(249,31,29)"/><text x="1.5684%" y="1103.50"></text></g><g><title>hyper::common::watch::Receiver::load (21 samples, 0.46%)</title><rect x="1.3184%" y="1077" width="0.4614%" height="15" fill="rgb(225,111,53)"/><text x="1.5684%" y="1087.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (19 samples, 0.42%)</title><rect x="1.3623%" y="1061" width="0.4175%" height="15" fill="rgb(238,160,17)"/><text x="1.6123%" y="1071.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::park (11 samples, 0.24%)</title><rect x="1.8457%" y="1045" width="0.2417%" height="15" fill="rgb(214,148,48)"/><text x="2.0957%" y="1055.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (7 samples, 0.15%)</title><rect x="1.9336%" y="1029" width="0.1538%" height="15" fill="rgb(232,36,49)"/><text x="2.1836%" y="1039.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (5 samples, 0.11%)</title><rect x="1.9776%" y="1013" width="0.1099%" height="15" fill="rgb(209,103,24)"/><text x="2.2276%" y="1023.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (5 samples, 0.11%)</title><rect x="1.9776%" y="997" width="0.1099%" height="15" fill="rgb(229,88,8)"/><text x="2.2276%" y="1007.50"></text></g><g><title>__GI___pthread_mutex_lock (5 samples, 0.11%)</title><rect x="1.9776%" y="981" width="0.1099%" height="15" fill="rgb(213,181,19)"/><text x="2.2276%" y="991.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (15 samples, 0.33%)</title><rect x="1.7798%" y="1109" width="0.3296%" height="15" fill="rgb(254,191,54)"/><text x="2.0298%" y="1119.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (13 samples, 0.29%)</title><rect x="1.8238%" y="1093" width="0.2857%" height="15" fill="rgb(241,83,37)"/><text x="2.0738%" y="1103.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (13 samples, 0.29%)</title><rect x="1.8238%" y="1077" width="0.2857%" height="15" fill="rgb(233,36,39)"/><text x="2.0738%" y="1087.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::do_send_b (13 samples, 0.29%)</title><rect x="1.8238%" y="1061" width="0.2857%" height="15" fill="rgb(226,3,54)"/><text x="2.0738%" y="1071.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (9 samples, 0.20%)</title><rect x="2.1534%" y="1109" width="0.1978%" height="15" fill="rgb(245,192,40)"/><text x="2.4034%" y="1119.50"></text></g><g><title>inet_recvmsg (9 samples, 0.20%)</title><rect x="3.6036%" y="789" width="0.1978%" height="15" fill="rgb(238,167,29)"/><text x="3.8536%" y="799.50"></text></g><g><title>tcp_recvmsg (9 samples, 0.20%)</title><rect x="3.6036%" y="773" width="0.1978%" height="15" fill="rgb(232,182,51)"/><text x="3.8536%" y="783.50"></text></g><g><title>aa_sk_perm (6 samples, 0.13%)</title><rect x="3.8014%" y="757" width="0.1318%" height="15" fill="rgb(231,60,39)"/><text x="4.0514%" y="767.50"></text></g><g><title>sock_recvmsg (9 samples, 0.20%)</title><rect x="3.8014%" y="789" width="0.1978%" height="15" fill="rgb(208,69,12)"/><text x="4.0514%" y="799.50"></text></g><g><title>security_socket_recvmsg (9 samples, 0.20%)</title><rect x="3.8014%" y="773" width="0.1978%" height="15" fill="rgb(235,93,37)"/><text x="4.0514%" y="783.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (41 samples, 0.90%)</title><rect x="3.1861%" y="853" width="0.9009%" height="15" fill="rgb(213,116,39)"/><text x="3.4361%" y="863.50"></text></g><g><title>do_syscall_64 (41 samples, 0.90%)</title><rect x="3.1861%" y="837" width="0.9009%" height="15" fill="rgb(222,207,29)"/><text x="3.4361%" y="847.50"></text></g><g><title>__x64_sys_recvfrom (25 samples, 0.55%)</title><rect x="3.5377%" y="821" width="0.5493%" height="15" fill="rgb(206,96,30)"/><text x="3.7877%" y="831.50"></text></g><g><title>__sys_recvfrom (25 samples, 0.55%)</title><rect x="3.5377%" y="805" width="0.5493%" height="15" fill="rgb(218,138,4)"/><text x="3.7877%" y="815.50"></text></g><g><title>__libc_recv (81 samples, 1.78%)</title><rect x="2.4390%" y="885" width="1.7798%" height="15" fill="rgb(250,191,14)"/><text x="2.6890%" y="895.50">_..</text></g><g><title>__libc_recv (81 samples, 1.78%)</title><rect x="2.4390%" y="869" width="1.7798%" height="15" fill="rgb(239,60,40)"/><text x="2.6890%" y="879.50">_..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.13%)</title><rect x="4.0870%" y="853" width="0.1318%" height="15" fill="rgb(206,27,48)"/><text x="4.3370%" y="863.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.13%)</title><rect x="4.0870%" y="837" width="0.1318%" height="15" fill="rgb(225,35,8)"/><text x="4.3370%" y="847.50"></text></g><g><title>exit_to_usermode_loop (6 samples, 0.13%)</title><rect x="4.0870%" y="821" width="0.1318%" height="15" fill="rgb(250,213,24)"/><text x="4.3370%" y="831.50"></text></g><g><title>&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (82 samples, 1.80%)</title><rect x="2.4390%" y="981" width="1.8018%" height="15" fill="rgb(247,123,22)"/><text x="2.6890%" y="991.50">&lt;..</text></g><g><title>&lt;&amp;mio::sys::unix::tcp::TcpStream as std::io::Read&gt;::read (82 samples, 1.80%)</title><rect x="2.4390%" y="965" width="1.8018%" height="15" fill="rgb(231,138,38)"/><text x="2.6890%" y="975.50">&lt;..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (82 samples, 1.80%)</title><rect x="2.4390%" y="949" width="1.8018%" height="15" fill="rgb(231,145,46)"/><text x="2.6890%" y="959.50">&lt;..</text></g><g><title>std::sys_common::net::TcpStream::read (82 samples, 1.80%)</title><rect x="2.4390%" y="933" width="1.8018%" height="15" fill="rgb(251,118,11)"/><text x="2.6890%" y="943.50">s..</text></g><g><title>std::sys::unix::net::Socket::read (82 samples, 1.80%)</title><rect x="2.4390%" y="917" width="1.8018%" height="15" fill="rgb(217,147,25)"/><text x="2.6890%" y="927.50">s..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (82 samples, 1.80%)</title><rect x="2.4390%" y="901" width="1.8018%" height="15" fill="rgb(247,81,37)"/><text x="2.6890%" y="911.50">s..</text></g><g><title>std::sys::unix::decode_error_kind (6 samples, 0.13%)</title><rect x="4.3507%" y="981" width="0.1318%" height="15" fill="rgb(209,12,38)"/><text x="4.6007%" y="991.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::clear_read_ready (11 samples, 0.24%)</title><rect x="4.4825%" y="981" width="0.2417%" height="15" fill="rgb(227,1,9)"/><text x="4.7325%" y="991.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (9 samples, 0.20%)</title><rect x="4.5265%" y="965" width="0.1978%" height="15" fill="rgb(248,47,43)"/><text x="4.7765%" y="975.50"></text></g><g><title>tokio::io::registration::Registration::poll_read_ready (9 samples, 0.20%)</title><rect x="4.5265%" y="949" width="0.1978%" height="15" fill="rgb(221,10,30)"/><text x="4.7765%" y="959.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready (9 samples, 0.20%)</title><rect x="4.5265%" y="933" width="0.1978%" height="15" fill="rgb(210,229,1)"/><text x="4.7765%" y="943.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (117 samples, 2.57%)</title><rect x="2.4171%" y="1013" width="2.5709%" height="15" fill="rgb(222,148,37)"/><text x="2.6671%" y="1023.50">&lt;t..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (116 samples, 2.55%)</title><rect x="2.4390%" y="997" width="2.5489%" height="15" fill="rgb(234,67,33)"/><text x="2.6890%" y="1007.50">to..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (12 samples, 0.26%)</title><rect x="4.7242%" y="981" width="0.2637%" height="15" fill="rgb(247,98,35)"/><text x="4.9742%" y="991.50"></text></g><g><title>tokio::io::registration::Registration::take_read_ready (8 samples, 0.18%)</title><rect x="4.8121%" y="965" width="0.1758%" height="15" fill="rgb(247,138,52)"/><text x="5.0621%" y="975.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready (8 samples, 0.18%)</title><rect x="4.8121%" y="949" width="0.1758%" height="15" fill="rgb(213,79,30)"/><text x="5.0621%" y="959.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_read::AsyncRead&gt;::poll_read_buf (118 samples, 2.59%)</title><rect x="2.4171%" y="1045" width="2.5928%" height="15" fill="rgb(246,177,23)"/><text x="2.6671%" y="1055.50">&lt;h..</text></g><g><title>tokio::io::async_read::AsyncRead::poll_read_buf (118 samples, 2.59%)</title><rect x="2.4171%" y="1029" width="2.5928%" height="15" fill="rgb(230,62,27)"/><text x="2.6671%" y="1039.50">to..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.33%)</title><rect x="5.0538%" y="1013" width="0.3296%" height="15" fill="rgb(216,154,8)"/><text x="5.3038%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (15 samples, 0.33%)</title><rect x="5.0538%" y="997" width="0.3296%" height="15" fill="rgb(244,35,45)"/><text x="5.3038%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.33%)</title><rect x="5.0538%" y="981" width="0.3296%" height="15" fill="rgb(251,115,12)"/><text x="5.3038%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.33%)</title><rect x="5.0538%" y="965" width="0.3296%" height="15" fill="rgb(240,54,50)"/><text x="5.3038%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (15 samples, 0.33%)</title><rect x="5.0538%" y="949" width="0.3296%" height="15" fill="rgb(233,84,52)"/><text x="5.3038%" y="959.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.33%)</title><rect x="5.0538%" y="933" width="0.3296%" height="15" fill="rgb(207,117,47)"/><text x="5.3038%" y="943.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.33%)</title><rect x="5.0538%" y="917" width="0.3296%" height="15" fill="rgb(249,43,39)"/><text x="5.3038%" y="927.50"></text></g><g><title>_int_malloc (10 samples, 0.22%)</title><rect x="5.1637%" y="901" width="0.2197%" height="15" fill="rgb(209,38,44)"/><text x="5.4137%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (18 samples, 0.40%)</title><rect x="5.0099%" y="1045" width="0.3955%" height="15" fill="rgb(236,212,23)"/><text x="5.2599%" y="1055.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (18 samples, 0.40%)</title><rect x="5.0099%" y="1029" width="0.3955%" height="15" fill="rgb(242,79,21)"/><text x="5.2599%" y="1039.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (140 samples, 3.08%)</title><rect x="2.3511%" y="1109" width="3.0762%" height="15" fill="rgb(211,96,35)"/><text x="2.6011%" y="1119.50">hyp..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::mid_message_detect_eof (139 samples, 3.05%)</title><rect x="2.3731%" y="1093" width="3.0543%" height="15" fill="rgb(253,215,40)"/><text x="2.6231%" y="1103.50">hyp..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (139 samples, 3.05%)</title><rect x="2.3731%" y="1077" width="3.0543%" height="15" fill="rgb(211,81,21)"/><text x="2.6231%" y="1087.50">hyp..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (139 samples, 3.05%)</title><rect x="2.3731%" y="1061" width="3.0543%" height="15" fill="rgb(208,190,38)"/><text x="2.6231%" y="1071.50">hyp..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_ready (7 samples, 0.15%)</title><rect x="5.5153%" y="1093" width="0.1538%" height="15" fill="rgb(235,213,38)"/><text x="5.7653%" y="1103.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (5 samples, 0.11%)</title><rect x="5.8888%" y="1061" width="0.1099%" height="15" fill="rgb(237,122,38)"/><text x="6.1388%" y="1071.50"></text></g><g><title>std::sys_common::mutex::Mutex::init (8 samples, 0.18%)</title><rect x="6.1964%" y="1045" width="0.1758%" height="15" fill="rgb(244,218,35)"/><text x="6.4464%" y="1055.50"></text></g><g><title>std::sys::unix::mutex::Mutex::init (8 samples, 0.18%)</title><rect x="6.1964%" y="1029" width="0.1758%" height="15" fill="rgb(240,68,47)"/><text x="6.4464%" y="1039.50"></text></g><g><title>futures_channel::mpsc::channel (24 samples, 0.53%)</title><rect x="5.8668%" y="1077" width="0.5274%" height="15" fill="rgb(210,16,53)"/><text x="6.1168%" y="1087.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::new (14 samples, 0.31%)</title><rect x="6.0866%" y="1061" width="0.3076%" height="15" fill="rgb(235,124,12)"/><text x="6.3366%" y="1071.50"></text></g><g><title>hyper::body::body::Body::new_channel (28 samples, 0.62%)</title><rect x="5.8009%" y="1093" width="0.6152%" height="15" fill="rgb(224,169,11)"/><text x="6.0509%" y="1103.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (10 samples, 0.22%)</title><rect x="6.7897%" y="1061" width="0.2197%" height="15" fill="rgb(250,166,2)"/><text x="7.0397%" y="1071.50"></text></g><g><title>__rust_probestack (6 samples, 0.13%)</title><rect x="6.8776%" y="1045" width="0.1318%" height="15" fill="rgb(242,216,29)"/><text x="7.1276%" y="1055.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (8 samples, 0.18%)</title><rect x="7.1193%" y="1061" width="0.1758%" height="15" fill="rgb(230,116,27)"/><text x="7.3693%" y="1071.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (31 samples, 0.68%)</title><rect x="6.6359%" y="1077" width="0.6812%" height="15" fill="rgb(228,99,48)"/><text x="6.8859%" y="1087.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (283 samples, 6.22%)</title><rect x="1.1426%" y="1125" width="6.2184%" height="15" fill="rgb(253,11,6)"/><text x="1.3926%" y="1135.50">hyper::p..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (88 samples, 1.93%)</title><rect x="5.4274%" y="1109" width="1.9336%" height="15" fill="rgb(247,143,39)"/><text x="5.6774%" y="1119.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (43 samples, 0.94%)</title><rect x="6.4162%" y="1093" width="0.9448%" height="15" fill="rgb(236,97,10)"/><text x="6.6662%" y="1103.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.20%)</title><rect x="7.7346%" y="1013" width="0.1978%" height="15" fill="rgb(233,208,19)"/><text x="7.9846%" y="1023.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.11%)</title><rect x="8.1081%" y="805" width="0.1099%" height="15" fill="rgb(216,164,2)"/><text x="8.3581%" y="815.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.15%)</title><rect x="8.0861%" y="965" width="0.1538%" height="15" fill="rgb(220,129,5)"/><text x="8.3361%" y="975.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.13%)</title><rect x="8.1081%" y="949" width="0.1318%" height="15" fill="rgb(242,17,10)"/><text x="8.3581%" y="959.50"></text></g><g><title>alloc::string::String::push_str (6 samples, 0.13%)</title><rect x="8.1081%" y="933" width="0.1318%" height="15" fill="rgb(242,107,0)"/><text x="8.3581%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.13%)</title><rect x="8.1081%" y="917" width="0.1318%" height="15" fill="rgb(251,28,31)"/><text x="8.3581%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.13%)</title><rect x="8.1081%" y="901" width="0.1318%" height="15" fill="rgb(233,223,10)"/><text x="8.3581%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (6 samples, 0.13%)</title><rect x="8.1081%" y="885" width="0.1318%" height="15" fill="rgb(215,21,27)"/><text x="8.3581%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.13%)</title><rect x="8.1081%" y="869" width="0.1318%" height="15" fill="rgb(232,23,21)"/><text x="8.3581%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (6 samples, 0.13%)</title><rect x="8.1081%" y="853" width="0.1318%" height="15" fill="rgb(244,5,23)"/><text x="8.3581%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow (6 samples, 0.13%)</title><rect x="8.1081%" y="837" width="0.1318%" height="15" fill="rgb(226,81,46)"/><text x="8.3581%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.13%)</title><rect x="8.1081%" y="821" width="0.1318%" height="15" fill="rgb(247,70,30)"/><text x="8.3581%" y="831.50"></text></g><g><title>core::fmt::write (12 samples, 0.26%)</title><rect x="8.0422%" y="981" width="0.2637%" height="15" fill="rgb(212,68,19)"/><text x="8.2922%" y="991.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (18 samples, 0.40%)</title><rect x="7.9323%" y="1013" width="0.3955%" height="15" fill="rgb(240,187,13)"/><text x="8.1823%" y="1023.50"></text></g><g><title>core::fmt::Formatter::write_fmt (14 samples, 0.31%)</title><rect x="8.0202%" y="997" width="0.3076%" height="15" fill="rgb(223,113,26)"/><text x="8.2702%" y="1007.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (30 samples, 0.66%)</title><rect x="7.6906%" y="1061" width="0.6592%" height="15" fill="rgb(206,192,2)"/><text x="7.9406%" y="1071.50"></text></g><g><title>core::fmt::Write::write_fmt (30 samples, 0.66%)</title><rect x="7.6906%" y="1045" width="0.6592%" height="15" fill="rgb(241,108,4)"/><text x="7.9406%" y="1055.50"></text></g><g><title>core::fmt::write (30 samples, 0.66%)</title><rect x="7.6906%" y="1029" width="0.6592%" height="15" fill="rgb(247,173,49)"/><text x="7.9406%" y="1039.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5 samples, 0.11%)</title><rect x="8.3498%" y="1061" width="0.1099%" height="15" fill="rgb(224,114,35)"/><text x="8.5998%" y="1071.50"></text></g><g><title>&lt;hyper::body::body::Body as core::convert::From&lt;&amp;str&gt;&gt;::from (5 samples, 0.11%)</title><rect x="8.3498%" y="1045" width="0.1099%" height="15" fill="rgb(245,159,27)"/><text x="8.5998%" y="1055.50"></text></g><g><title>&lt;hyper::body::body::Body as core::convert::From&lt;bytes::bytes::Bytes&gt;&gt;::from (5 samples, 0.11%)</title><rect x="8.3498%" y="1029" width="0.1099%" height="15" fill="rgb(245,172,44)"/><text x="8.5998%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (22 samples, 0.48%)</title><rect x="8.4597%" y="1013" width="0.4834%" height="15" fill="rgb(236,23,11)"/><text x="8.7097%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (22 samples, 0.48%)</title><rect x="8.4597%" y="997" width="0.4834%" height="15" fill="rgb(205,117,38)"/><text x="8.7097%" y="1007.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (22 samples, 0.48%)</title><rect x="8.4597%" y="981" width="0.4834%" height="15" fill="rgb(237,72,25)"/><text x="8.7097%" y="991.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.48%)</title><rect x="8.4597%" y="965" width="0.4834%" height="15" fill="rgb(244,70,9)"/><text x="8.7097%" y="975.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.48%)</title><rect x="8.4597%" y="949" width="0.4834%" height="15" fill="rgb(217,125,39)"/><text x="8.7097%" y="959.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.11%)</title><rect x="8.8332%" y="933" width="0.1099%" height="15" fill="rgb(235,36,10)"/><text x="9.0832%" y="943.50"></text></g><g><title>prepare_exit_to_usermode (5 samples, 0.11%)</title><rect x="8.8332%" y="917" width="0.1099%" height="15" fill="rgb(251,123,47)"/><text x="9.0832%" y="927.50"></text></g><g><title>exit_to_usermode_loop (5 samples, 0.11%)</title><rect x="8.8332%" y="901" width="0.1099%" height="15" fill="rgb(221,13,13)"/><text x="9.0832%" y="911.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.35%)</title><rect x="8.9431%" y="917" width="0.3516%" height="15" fill="rgb(238,131,9)"/><text x="9.1931%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (39 samples, 0.86%)</title><rect x="8.4597%" y="1061" width="0.8570%" height="15" fill="rgb(211,50,8)"/><text x="8.7097%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (39 samples, 0.86%)</title><rect x="8.4597%" y="1045" width="0.8570%" height="15" fill="rgb(245,182,24)"/><text x="8.7097%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (39 samples, 0.86%)</title><rect x="8.4597%" y="1029" width="0.8570%" height="15" fill="rgb(242,14,37)"/><text x="8.7097%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.37%)</title><rect x="8.9431%" y="1013" width="0.3735%" height="15" fill="rgb(246,228,12)"/><text x="9.1931%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (17 samples, 0.37%)</title><rect x="8.9431%" y="997" width="0.3735%" height="15" fill="rgb(213,55,15)"/><text x="9.1931%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.37%)</title><rect x="8.9431%" y="981" width="0.3735%" height="15" fill="rgb(209,9,3)"/><text x="9.1931%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.37%)</title><rect x="8.9431%" y="965" width="0.3735%" height="15" fill="rgb(230,59,30)"/><text x="9.1931%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (17 samples, 0.37%)</title><rect x="8.9431%" y="949" width="0.3735%" height="15" fill="rgb(209,121,21)"/><text x="9.1931%" y="959.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.37%)</title><rect x="8.9431%" y="933" width="0.3735%" height="15" fill="rgb(220,109,13)"/><text x="9.1931%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.20%)</title><rect x="9.7341%" y="901" width="0.1978%" height="15" fill="rgb(232,18,1)"/><text x="9.9841%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.20%)</title><rect x="9.7341%" y="885" width="0.1978%" height="15" fill="rgb(215,41,42)"/><text x="9.9841%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.20%)</title><rect x="9.7341%" y="869" width="0.1978%" height="15" fill="rgb(224,123,36)"/><text x="9.9841%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.11%)</title><rect x="9.8220%" y="853" width="0.1099%" height="15" fill="rgb(240,125,3)"/><text x="10.0720%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.13%)</title><rect x="9.9319%" y="869" width="0.1318%" height="15" fill="rgb(205,98,50)"/><text x="10.1819%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.11%)</title><rect x="9.9539%" y="853" width="0.1099%" height="15" fill="rgb(205,185,37)"/><text x="10.2039%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.20%)</title><rect x="9.9319%" y="885" width="0.1978%" height="15" fill="rgb(238,207,15)"/><text x="10.1819%" y="895.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::unpark_one (10 samples, 0.22%)</title><rect x="9.9319%" y="901" width="0.2197%" height="15" fill="rgb(213,199,42)"/><text x="10.1819%" y="911.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (6 samples, 0.13%)</title><rect x="10.1516%" y="901" width="0.1318%" height="15" fill="rgb(235,201,11)"/><text x="10.4016%" y="911.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (31 samples, 0.68%)</title><rect x="9.6462%" y="933" width="0.6812%" height="15" fill="rgb(207,46,11)"/><text x="9.8962%" y="943.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (30 samples, 0.66%)</title><rect x="9.6682%" y="917" width="0.6592%" height="15" fill="rgb(241,35,35)"/><text x="9.9182%" y="927.50"></text></g><g><title>&lt;http_body::next::Data&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.90%)</title><rect x="9.5144%" y="1029" width="0.9009%" height="15" fill="rgb(243,32,47)"/><text x="9.7644%" y="1039.50"></text></g><g><title>&lt;&amp;mut T as http_body::Body&gt;::poll_data (41 samples, 0.90%)</title><rect x="9.5144%" y="1013" width="0.9009%" height="15" fill="rgb(247,202,23)"/><text x="9.7644%" y="1023.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as http_body::Body&gt;::poll_data (41 samples, 0.90%)</title><rect x="9.5144%" y="997" width="0.9009%" height="15" fill="rgb(219,102,11)"/><text x="9.7644%" y="1007.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (41 samples, 0.90%)</title><rect x="9.5144%" y="981" width="0.9009%" height="15" fill="rgb(243,110,44)"/><text x="9.7644%" y="991.50"></text></g><g><title>hyper::body::body::Body::poll_eof (41 samples, 0.90%)</title><rect x="9.5144%" y="965" width="0.9009%" height="15" fill="rgb(222,74,54)"/><text x="9.7644%" y="975.50"></text></g><g><title>hyper::body::body::Body::poll_inner (41 samples, 0.90%)</title><rect x="9.5144%" y="949" width="0.9009%" height="15" fill="rgb(216,99,12)"/><text x="9.7644%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.18%)</title><rect x="10.4153%" y="1029" width="0.1758%" height="15" fill="rgb(226,22,26)"/><text x="10.6653%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.13%)</title><rect x="10.4592%" y="1013" width="0.1318%" height="15" fill="rgb(217,163,10)"/><text x="10.7092%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.13%)</title><rect x="10.4592%" y="997" width="0.1318%" height="15" fill="rgb(213,25,53)"/><text x="10.7092%" y="1007.50"></text></g><g><title>hyper::body::to_bytes::to_bytes::{{closure}} (57 samples, 1.25%)</title><rect x="9.3606%" y="1045" width="1.2525%" height="15" fill="rgb(252,105,26)"/><text x="9.6106%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (9 samples, 0.20%)</title><rect x="10.7449%" y="981" width="0.1978%" height="15" fill="rgb(220,39,43)"/><text x="10.9949%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (77 samples, 1.69%)</title><rect x="9.3166%" y="1061" width="1.6919%" height="15" fill="rgb(229,68,48)"/><text x="9.5666%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::{{closure}} (18 samples, 0.40%)</title><rect x="10.6131%" y="1045" width="0.3955%" height="15" fill="rgb(252,8,32)"/><text x="10.8631%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::try_send (16 samples, 0.35%)</title><rect x="10.6570%" y="1029" width="0.3516%" height="15" fill="rgb(223,20,43)"/><text x="10.9070%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::try_send (16 samples, 0.35%)</title><rect x="10.6570%" y="1013" width="0.3516%" height="15" fill="rgb(229,81,49)"/><text x="10.9070%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::try_send (16 samples, 0.35%)</title><rect x="10.6570%" y="997" width="0.3516%" height="15" fill="rgb(236,28,36)"/><text x="10.9070%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (14 samples, 0.31%)</title><rect x="11.0525%" y="1029" width="0.3076%" height="15" fill="rgb(249,185,26)"/><text x="11.3025%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.31%)</title><rect x="11.0525%" y="1013" width="0.3076%" height="15" fill="rgb(249,174,33)"/><text x="11.3025%" y="1023.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (14 samples, 0.31%)</title><rect x="11.0525%" y="997" width="0.3076%" height="15" fill="rgb(233,201,37)"/><text x="11.3025%" y="1007.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.31%)</title><rect x="11.0525%" y="981" width="0.3076%" height="15" fill="rgb(221,78,26)"/><text x="11.3025%" y="991.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.31%)</title><rect x="11.0525%" y="965" width="0.3076%" height="15" fill="rgb(250,127,30)"/><text x="11.3025%" y="975.50"></text></g><g><title>_int_malloc (6 samples, 0.13%)</title><rect x="11.4480%" y="917" width="0.1318%" height="15" fill="rgb(230,49,44)"/><text x="11.6980%" y="927.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.26%)</title><rect x="11.3601%" y="933" width="0.2637%" height="15" fill="rgb(229,67,23)"/><text x="11.6101%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.62%)</title><rect x="11.0525%" y="1061" width="0.6152%" height="15" fill="rgb(249,83,47)"/><text x="11.3025%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.62%)</title><rect x="11.0525%" y="1045" width="0.6152%" height="15" fill="rgb(215,43,3)"/><text x="11.3025%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (14 samples, 0.31%)</title><rect x="11.3601%" y="1029" width="0.3076%" height="15" fill="rgb(238,154,13)"/><text x="11.6101%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (14 samples, 0.31%)</title><rect x="11.3601%" y="1013" width="0.3076%" height="15" fill="rgb(219,56,2)"/><text x="11.6101%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.31%)</title><rect x="11.3601%" y="997" width="0.3076%" height="15" fill="rgb(233,0,4)"/><text x="11.6101%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.31%)</title><rect x="11.3601%" y="981" width="0.3076%" height="15" fill="rgb(235,30,7)"/><text x="11.6101%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (14 samples, 0.31%)</title><rect x="11.3601%" y="965" width="0.3076%" height="15" fill="rgb(250,79,13)"/><text x="11.6101%" y="975.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.31%)</title><rect x="11.3601%" y="949" width="0.3076%" height="15" fill="rgb(211,146,34)"/><text x="11.6101%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.29%)</title><rect x="11.7117%" y="997" width="0.2857%" height="15" fill="rgb(228,22,38)"/><text x="11.9617%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.29%)</title><rect x="11.7117%" y="981" width="0.2857%" height="15" fill="rgb(235,168,5)"/><text x="11.9617%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.29%)</title><rect x="11.7117%" y="965" width="0.2857%" height="15" fill="rgb(221,155,16)"/><text x="11.9617%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.29%)</title><rect x="11.7117%" y="949" width="0.2857%" height="15" fill="rgb(215,215,53)"/><text x="11.9617%" y="959.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.29%)</title><rect x="11.7117%" y="933" width="0.2857%" height="15" fill="rgb(223,4,10)"/><text x="11.9617%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (13 samples, 0.29%)</title><rect x="11.7117%" y="917" width="0.2857%" height="15" fill="rgb(234,103,6)"/><text x="11.9617%" y="927.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.29%)</title><rect x="11.7117%" y="901" width="0.2857%" height="15" fill="rgb(227,97,0)"/><text x="11.9617%" y="911.50"></text></g><g><title>_int_free (12 samples, 0.26%)</title><rect x="11.7337%" y="885" width="0.2637%" height="15" fill="rgb(234,150,53)"/><text x="11.9837%" y="895.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (16 samples, 0.35%)</title><rect x="11.6678%" y="1045" width="0.3516%" height="15" fill="rgb(228,201,54)"/><text x="11.9178%" y="1055.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (15 samples, 0.33%)</title><rect x="11.6897%" y="1029" width="0.3296%" height="15" fill="rgb(222,22,37)"/><text x="11.9397%" y="1039.50"></text></g><g><title>bytes::bytes_mut::release_shared (15 samples, 0.33%)</title><rect x="11.6897%" y="1013" width="0.3296%" height="15" fill="rgb(237,53,32)"/><text x="11.9397%" y="1023.50"></text></g><g><title>&lt;object_pool::Reusable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.13%)</title><rect x="12.0193%" y="1045" width="0.1318%" height="15" fill="rgb(233,25,53)"/><text x="12.2693%" y="1055.50"></text></g><g><title>object_pool::Pool&lt;T&gt;::attach (6 samples, 0.13%)</title><rect x="12.0193%" y="1029" width="0.1318%" height="15" fill="rgb(210,40,34)"/><text x="12.2693%" y="1039.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.35%)</title><rect x="12.1951%" y="1029" width="0.3516%" height="15" fill="rgb(241,220,44)"/><text x="12.4451%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (16 samples, 0.35%)</title><rect x="12.1951%" y="1013" width="0.3516%" height="15" fill="rgb(235,28,35)"/><text x="12.4451%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.35%)</title><rect x="12.1951%" y="997" width="0.3516%" height="15" fill="rgb(210,56,17)"/><text x="12.4451%" y="1007.50"></text></g><g><title>_int_free (16 samples, 0.35%)</title><rect x="12.1951%" y="981" width="0.3516%" height="15" fill="rgb(224,130,29)"/><text x="12.4451%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (46 samples, 1.01%)</title><rect x="11.6678%" y="1061" width="1.0108%" height="15" fill="rgb(235,212,8)"/><text x="11.9178%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (24 samples, 0.53%)</title><rect x="12.1512%" y="1045" width="0.5274%" height="15" fill="rgb(223,33,50)"/><text x="12.4012%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.11%)</title><rect x="12.5687%" y="1029" width="0.1099%" height="15" fill="rgb(219,149,13)"/><text x="12.8187%" y="1039.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::align (5 samples, 0.11%)</title><rect x="12.8763%" y="1013" width="0.1099%" height="15" fill="rgb(250,156,29)"/><text x="13.1263%" y="1023.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::make_space (6 samples, 0.13%)</title><rect x="12.9862%" y="1013" width="0.1318%" height="15" fill="rgb(216,193,19)"/><text x="13.2362%" y="1023.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push (13 samples, 0.29%)</title><rect x="12.8543%" y="1029" width="0.2857%" height="15" fill="rgb(216,135,14)"/><text x="13.1043%" y="1039.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_string (20 samples, 0.44%)</title><rect x="12.7664%" y="1061" width="0.4395%" height="15" fill="rgb(241,47,5)"/><text x="13.0164%" y="1071.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_byte_string (19 samples, 0.42%)</title><rect x="12.7884%" y="1045" width="0.4175%" height="15" fill="rgb(233,42,35)"/><text x="13.0384%" y="1055.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 5.34%)</title><rect x="13.3377%" y="1045" width="5.3395%" height="15" fill="rgb(231,13,6)"/><text x="13.5877%" y="1055.50">&lt;core::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (243 samples, 5.34%)</title><rect x="13.3377%" y="1029" width="5.3395%" height="15" fill="rgb(207,181,40)"/><text x="13.5877%" y="1039.50">core::i..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (243 samples, 5.34%)</title><rect x="13.3377%" y="1013" width="5.3395%" height="15" fill="rgb(254,173,49)"/><text x="13.5877%" y="1023.50">core::c..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (37 samples, 0.81%)</title><rect x="17.8642%" y="997" width="0.8130%" height="15" fill="rgb(221,1,38)"/><text x="18.1142%" y="1007.50"></text></g><g><title>prepare_exit_to_usermode (37 samples, 0.81%)</title><rect x="17.8642%" y="981" width="0.8130%" height="15" fill="rgb(206,124,46)"/><text x="18.1142%" y="991.50"></text></g><g><title>exit_to_usermode_loop (37 samples, 0.81%)</title><rect x="17.8642%" y="965" width="0.8130%" height="15" fill="rgb(249,21,11)"/><text x="18.1142%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (43 samples, 0.94%)</title><rect x="20.9185%" y="997" width="0.9448%" height="15" fill="rgb(222,201,40)"/><text x="21.1685%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (43 samples, 0.94%)</title><rect x="20.9185%" y="981" width="0.9448%" height="15" fill="rgb(235,61,29)"/><text x="21.1685%" y="991.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.13%)</title><rect x="21.7315%" y="965" width="0.1318%" height="15" fill="rgb(219,207,3)"/><text x="21.9815%" y="975.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.13%)</title><rect x="21.7315%" y="949" width="0.1318%" height="15" fill="rgb(222,56,46)"/><text x="21.9815%" y="959.50"></text></g><g><title>exit_to_usermode_loop (6 samples, 0.13%)</title><rect x="21.7315%" y="933" width="0.1318%" height="15" fill="rgb(239,76,54)"/><text x="21.9815%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (53 samples, 1.16%)</title><rect x="20.7647%" y="1013" width="1.1646%" height="15" fill="rgb(231,124,27)"/><text x="21.0147%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (106 samples, 2.33%)</title><rect x="20.7647%" y="1029" width="2.3292%" height="15" fill="rgb(249,195,6)"/><text x="21.0147%" y="1039.50">&lt;..</text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (53 samples, 1.16%)</title><rect x="21.9292%" y="1013" width="1.1646%" height="15" fill="rgb(237,174,47)"/><text x="22.1792%" y="1023.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (53 samples, 1.16%)</title><rect x="21.9292%" y="997" width="1.1646%" height="15" fill="rgb(206,201,31)"/><text x="22.1792%" y="1007.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (53 samples, 1.16%)</title><rect x="21.9292%" y="981" width="1.1646%" height="15" fill="rgb(231,57,52)"/><text x="22.1792%" y="991.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (9 samples, 0.20%)</title><rect x="22.8961%" y="965" width="0.1978%" height="15" fill="rgb(248,177,22)"/><text x="23.1461%" y="975.50"></text></g><g><title>prepare_exit_to_usermode (9 samples, 0.20%)</title><rect x="22.8961%" y="949" width="0.1978%" height="15" fill="rgb(215,211,37)"/><text x="23.1461%" y="959.50"></text></g><g><title>exit_to_usermode_loop (9 samples, 0.20%)</title><rect x="22.8961%" y="933" width="0.1978%" height="15" fill="rgb(241,128,51)"/><text x="23.1461%" y="943.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (18 samples, 0.40%)</title><rect x="23.1158%" y="1029" width="0.3955%" height="15" fill="rgb(227,165,31)"/><text x="23.3658%" y="1039.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity (54 samples, 1.19%)</title><rect x="30.0374%" y="997" width="1.1866%" height="15" fill="rgb(228,167,24)"/><text x="30.2874%" y="1007.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.13%)</title><rect x="31.0921%" y="981" width="0.1318%" height="15" fill="rgb(228,143,12)"/><text x="31.3421%" y="991.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.13%)</title><rect x="31.0921%" y="965" width="0.1318%" height="15" fill="rgb(249,149,8)"/><text x="31.3421%" y="975.50"></text></g><g><title>exit_to_usermode_loop (6 samples, 0.13%)</title><rect x="31.0921%" y="949" width="0.1318%" height="15" fill="rgb(243,35,44)"/><text x="31.3421%" y="959.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::make_space (396 samples, 8.70%)</title><rect x="23.6432%" y="1013" width="8.7014%" height="15" fill="rgb(246,89,9)"/><text x="23.8932%" y="1023.50">flatbuffers:..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (51 samples, 1.12%)</title><rect x="31.2239%" y="997" width="1.1206%" height="15" fill="rgb(233,213,13)"/><text x="31.4739%" y="1007.50"></text></g><g><title>prepare_exit_to_usermode (51 samples, 1.12%)</title><rect x="31.2239%" y="981" width="1.1206%" height="15" fill="rgb(233,141,41)"/><text x="31.4739%" y="991.50"></text></g><g><title>exit_to_usermode_loop (51 samples, 1.12%)</title><rect x="31.2239%" y="965" width="1.1206%" height="15" fill="rgb(239,167,4)"/><text x="31.4739%" y="975.50"></text></g><g><title>core::cmp::max (6 samples, 0.13%)</title><rect x="34.2123%" y="997" width="0.1318%" height="15" fill="rgb(209,217,16)"/><text x="34.4623%" y="1007.50"></text></g><g><title>core::cmp::Ord::max (6 samples, 0.13%)</title><rect x="34.2123%" y="981" width="0.1318%" height="15" fill="rgb(219,88,35)"/><text x="34.4623%" y="991.50"></text></g><g><title>core::cmp::max_by (6 samples, 0.13%)</title><rect x="34.2123%" y="965" width="0.1318%" height="15" fill="rgb(220,193,23)"/><text x="34.4623%" y="975.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::align (511 samples, 11.23%)</title><rect x="23.5113%" y="1029" width="11.2283%" height="15" fill="rgb(230,90,52)"/><text x="23.7613%" y="1039.50">flatbuffers::buil..</text></g><g><title>flatbuffers::builder::FlatBufferBuilder::track_min_align (109 samples, 2.40%)</title><rect x="32.3445%" y="1013" width="2.3951%" height="15" fill="rgb(252,106,19)"/><text x="32.5945%" y="1023.50">fl..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (18 samples, 0.40%)</title><rect x="34.3441%" y="997" width="0.3955%" height="15" fill="rgb(206,74,20)"/><text x="34.5941%" y="1007.50"></text></g><g><title>prepare_exit_to_usermode (18 samples, 0.40%)</title><rect x="34.3441%" y="981" width="0.3955%" height="15" fill="rgb(230,138,44)"/><text x="34.5941%" y="991.50"></text></g><g><title>exit_to_usermode_loop (18 samples, 0.40%)</title><rect x="34.3441%" y="965" width="0.3955%" height="15" fill="rgb(235,182,43)"/><text x="34.5941%" y="975.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity (70 samples, 1.54%)</title><rect x="40.5625%" y="1013" width="1.5381%" height="15" fill="rgb(242,16,51)"/><text x="40.8125%" y="1023.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (12 samples, 0.26%)</title><rect x="41.8370%" y="997" width="0.2637%" height="15" fill="rgb(248,9,4)"/><text x="42.0870%" y="1007.50"></text></g><g><title>prepare_exit_to_usermode (12 samples, 0.26%)</title><rect x="41.8370%" y="981" width="0.2637%" height="15" fill="rgb(210,31,22)"/><text x="42.0870%" y="991.50"></text></g><g><title>exit_to_usermode_loop (12 samples, 0.26%)</title><rect x="41.8370%" y="965" width="0.2637%" height="15" fill="rgb(239,54,39)"/><text x="42.0870%" y="975.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::make_space (389 samples, 8.55%)</title><rect x="34.7396%" y="1029" width="8.5476%" height="15" fill="rgb(230,99,41)"/><text x="34.9896%" y="1039.50">flatbuffers:..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (54 samples, 1.19%)</title><rect x="42.1006%" y="1013" width="1.1866%" height="15" fill="rgb(253,106,12)"/><text x="42.3506%" y="1023.50"></text></g><g><title>prepare_exit_to_usermode (54 samples, 1.19%)</title><rect x="42.1006%" y="997" width="1.1866%" height="15" fill="rgb(213,46,41)"/><text x="42.3506%" y="1007.50"></text></g><g><title>exit_to_usermode_loop (54 samples, 1.19%)</title><rect x="42.1006%" y="981" width="1.1866%" height="15" fill="rgb(215,133,35)"/><text x="42.3506%" y="991.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push (1,127 samples, 24.76%)</title><rect x="18.6992%" y="1045" width="24.7638%" height="15" fill="rgb(213,28,5)"/><text x="18.9492%" y="1055.50">flatbuffers::builder::FlatBufferBuilder..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.18%)</title><rect x="43.2872%" y="1029" width="0.1758%" height="15" fill="rgb(215,77,49)"/><text x="43.5372%" y="1039.50"></text></g><g><title>prepare_exit_to_usermode (8 samples, 0.18%)</title><rect x="43.2872%" y="1013" width="0.1758%" height="15" fill="rgb(248,100,22)"/><text x="43.5372%" y="1023.50"></text></g><g><title>exit_to_usermode_loop (8 samples, 0.18%)</title><rect x="43.2872%" y="997" width="0.1758%" height="15" fill="rgb(208,67,9)"/><text x="43.5372%" y="1007.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_vector (1,379 samples, 30.30%)</title><rect x="13.2059%" y="1061" width="30.3010%" height="15" fill="rgb(219,133,21)"/><text x="13.4559%" y="1071.50">flatbuffers::builder::FlatBufferBuilder::create_v..</text></g><g><title>flatbuffers::builder::FlatBufferBuilder::reset (6 samples, 0.13%)</title><rect x="43.5289%" y="1061" width="0.1318%" height="15" fill="rgb(246,46,29)"/><text x="43.7789%" y="1071.50"></text></g><g><title>core::intrinsics::write_bytes (6 samples, 0.13%)</title><rect x="43.5289%" y="1045" width="0.1318%" height="15" fill="rgb(246,185,52)"/><text x="43.7789%" y="1055.50"></text></g><g><title>__memset_avx2_erms (5 samples, 0.11%)</title><rect x="43.5509%" y="1029" width="0.1099%" height="15" fill="rgb(252,136,11)"/><text x="43.8009%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.11%)</title><rect x="43.8365%" y="1045" width="0.1099%" height="15" fill="rgb(219,138,53)"/><text x="44.0865%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.11%)</title><rect x="43.8365%" y="1029" width="0.1099%" height="15" fill="rgb(211,51,23)"/><text x="44.0865%" y="1039.50"></text></g><g><title>http::request::Request&lt;T&gt;::into_body (13 samples, 0.29%)</title><rect x="43.7047%" y="1061" width="0.2857%" height="15" fill="rgb(247,221,28)"/><text x="43.9547%" y="1071.50"></text></g><g><title>object_pool::Pool&lt;T&gt;::try_pull (12 samples, 0.26%)</title><rect x="44.0563%" y="1061" width="0.2637%" height="15" fill="rgb(251,222,45)"/><text x="44.3063%" y="1071.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (11 samples, 0.24%)</title><rect x="44.0782%" y="1045" width="0.2417%" height="15" fill="rgb(217,162,53)"/><text x="44.3282%" y="1055.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (11 samples, 0.24%)</title><rect x="44.0782%" y="1029" width="0.2417%" height="15" fill="rgb(229,93,14)"/><text x="44.3282%" y="1039.50"></text></g><g><title>rtest5::handle::{{closure}} (1,697 samples, 37.29%)</title><rect x="7.5588%" y="1077" width="37.2885%" height="15" fill="rgb(209,67,49)"/><text x="7.8088%" y="1087.50">rtest5::handle::{{closure}}</text></g><g><title>rtest5::request_generated::fbr::Request::create (24 samples, 0.53%)</title><rect x="44.3199%" y="1061" width="0.5274%" height="15" fill="rgb(213,87,29)"/><text x="44.5699%" y="1071.50"></text></g><g><title>rtest5::request_generated::fbr::RequestBuilder::finish (15 samples, 0.33%)</title><rect x="44.5177%" y="1045" width="0.3296%" height="15" fill="rgb(205,151,52)"/><text x="44.7677%" y="1055.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::end_table (15 samples, 0.33%)</title><rect x="44.5177%" y="1029" width="0.3296%" height="15" fill="rgb(253,215,39)"/><text x="44.7677%" y="1039.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (15 samples, 0.33%)</title><rect x="44.5177%" y="1013" width="0.3296%" height="15" fill="rgb(221,220,41)"/><text x="44.7677%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,701 samples, 37.38%)</title><rect x="7.4929%" y="1093" width="37.3764%" height="15" fill="rgb(218,133,21)"/><text x="7.7429%" y="1103.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (1,705 samples, 37.46%)</title><rect x="7.4489%" y="1109" width="37.4643%" height="15" fill="rgb(221,193,43)"/><text x="7.6989%" y="1119.50">&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body..</text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.26%)</title><rect x="44.9132%" y="1109" width="0.2637%" height="15" fill="rgb(240,128,52)"/><text x="45.1632%" y="1119.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.13%)</title><rect x="45.6603%" y="1013" width="0.1318%" height="15" fill="rgb(253,114,12)"/><text x="45.9103%" y="1023.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (28 samples, 0.62%)</title><rect x="45.2428%" y="1093" width="0.6152%" height="15" fill="rgb(215,223,47)"/><text x="45.4928%" y="1103.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (25 samples, 0.55%)</title><rect x="45.3087%" y="1077" width="0.5493%" height="15" fill="rgb(248,225,23)"/><text x="45.5587%" y="1087.50"></text></g><g><title>hyper::proto::h1::role::extend (9 samples, 0.20%)</title><rect x="45.6603%" y="1061" width="0.1978%" height="15" fill="rgb(250,108,0)"/><text x="45.9103%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.20%)</title><rect x="45.6603%" y="1045" width="0.1978%" height="15" fill="rgb(228,208,7)"/><text x="45.9103%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.20%)</title><rect x="45.6603%" y="1029" width="0.1978%" height="15" fill="rgb(244,45,10)"/><text x="45.9103%" y="1039.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::danger_full_buf (8 samples, 0.18%)</title><rect x="45.8581%" y="1093" width="0.1758%" height="15" fill="rgb(207,125,25)"/><text x="46.1081%" y="1103.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_full_msg (37 samples, 0.81%)</title><rect x="45.2428%" y="1109" width="0.8130%" height="15" fill="rgb(210,195,18)"/><text x="45.4928%" y="1119.50"></text></g><g><title>&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (2,098 samples, 46.10%)</title><rect x="0.0000%" y="1237" width="46.0998%" height="15" fill="rgb(249,80,12)"/><text x="0.2500%" y="1247.50">&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::futu..</text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (2,098 samples, 46.10%)</title><rect x="0.0000%" y="1221" width="46.0998%" height="15" fill="rgb(221,65,9)"/><text x="0.2500%" y="1231.50">&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future..</text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (2,098 samples, 46.10%)</title><rect x="0.0000%" y="1205" width="46.0998%" height="15" fill="rgb(235,49,36)"/><text x="0.2500%" y="1215.50">&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;:..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (2,098 samples, 46.10%)</title><rect x="0.0000%" y="1189" width="46.0998%" height="15" fill="rgb(225,32,20)"/><text x="0.2500%" y="1199.50">&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::F..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (2,098 samples, 46.10%)</title><rect x="0.0000%" y="1173" width="46.0998%" height="15" fill="rgb(215,141,46)"/><text x="0.2500%" y="1183.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (2,098 samples, 46.10%)</title><rect x="0.0000%" y="1157" width="46.0998%" height="15" fill="rgb(250,160,47)"/><text x="0.2500%" y="1167.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (2,076 samples, 45.62%)</title><rect x="0.4834%" y="1141" width="45.6163%" height="15" fill="rgb(216,222,40)"/><text x="0.7334%" y="1151.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (1,763 samples, 38.74%)</title><rect x="7.3610%" y="1125" width="38.7387%" height="15" fill="rgb(234,217,39)"/><text x="7.6110%" y="1135.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write</text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::bytes_vectored (5 samples, 0.11%)</title><rect x="46.4733%" y="1045" width="0.1099%" height="15" fill="rgb(207,178,40)"/><text x="46.7233%" y="1055.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (5 samples, 0.11%)</title><rect x="46.5832%" y="997" width="0.1099%" height="15" fill="rgb(221,136,13)"/><text x="46.8332%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::encode::EncodedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (5 samples, 0.11%)</title><rect x="46.5832%" y="981" width="0.1099%" height="15" fill="rgb(249,199,10)"/><text x="46.8332%" y="991.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::advance (9 samples, 0.20%)</title><rect x="46.5832%" y="1013" width="0.1978%" height="15" fill="rgb(249,222,13)"/><text x="46.8332%" y="1023.50"></text></g><g><title>&lt;hyper::proto::h1::io::Cursor&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (12 samples, 0.26%)</title><rect x="46.7809%" y="1013" width="0.2637%" height="15" fill="rgb(244,185,38)"/><text x="47.0309%" y="1023.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBufAuto&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (23 samples, 0.51%)</title><rect x="46.5832%" y="1045" width="0.5054%" height="15" fill="rgb(236,202,9)"/><text x="46.8332%" y="1055.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (23 samples, 0.51%)</title><rect x="46.5832%" y="1029" width="0.5054%" height="15" fill="rgb(250,229,37)"/><text x="46.8332%" y="1039.50"></text></g><g><title>__libc_enable_asynccancel (5 samples, 0.11%)</title><rect x="48.2092%" y="965" width="0.1099%" height="15" fill="rgb(206,174,23)"/><text x="48.4592%" y="975.50"></text></g><g><title>__x86_indirect_thunk_rax (5 samples, 0.11%)</title><rect x="48.3191%" y="965" width="0.1099%" height="15" fill="rgb(211,33,43)"/><text x="48.5691%" y="975.50"></text></g><g><title>__x64_sys_writev (5 samples, 0.11%)</title><rect x="48.8684%" y="933" width="0.1099%" height="15" fill="rgb(245,58,50)"/><text x="49.1184%" y="943.50"></text></g><g><title>__fdget_pos (6 samples, 0.13%)</title><rect x="49.0661%" y="917" width="0.1318%" height="15" fill="rgb(244,68,36)"/><text x="49.3161%" y="927.50"></text></g><g><title>__fget_light (5 samples, 0.11%)</title><rect x="49.0881%" y="901" width="0.1099%" height="15" fill="rgb(232,229,15)"/><text x="49.3381%" y="911.50"></text></g><g><title>__fsnotify_parent (8 samples, 0.18%)</title><rect x="49.4397%" y="885" width="0.1758%" height="15" fill="rgb(254,30,23)"/><text x="49.6897%" y="895.50"></text></g><g><title>tomoyo_socket_sendmsg (6 samples, 0.13%)</title><rect x="50.0330%" y="821" width="0.1318%" height="15" fill="rgb(235,160,14)"/><text x="50.2830%" y="831.50"></text></g><g><title>security_socket_sendmsg (17 samples, 0.37%)</title><rect x="49.9011%" y="837" width="0.3735%" height="15" fill="rgb(212,155,44)"/><text x="50.1511%" y="847.50"></text></g><g><title>tomoyo_socket_sendmsg_permission (5 samples, 0.11%)</title><rect x="50.1648%" y="821" width="0.1099%" height="15" fill="rgb(226,2,50)"/><text x="50.4148%" y="831.50"></text></g><g><title>__sk_dst_check (6 samples, 0.13%)</title><rect x="51.1975%" y="741" width="0.1318%" height="15" fill="rgb(234,177,6)"/><text x="51.4475%" y="751.50"></text></g><g><title>netif_rx (8 samples, 0.18%)</title><rect x="52.1863%" y="661" width="0.1758%" height="15" fill="rgb(217,24,9)"/><text x="52.4363%" y="671.50"></text></g><g><title>netif_rx_internal (8 samples, 0.18%)</title><rect x="52.1863%" y="645" width="0.1758%" height="15" fill="rgb(220,13,46)"/><text x="52.4363%" y="655.50"></text></g><g><title>enqueue_to_backlog (8 samples, 0.18%)</title><rect x="52.1863%" y="629" width="0.1758%" height="15" fill="rgb(239,221,27)"/><text x="52.4363%" y="639.50"></text></g><g><title>dev_hard_start_xmit (29 samples, 0.64%)</title><rect x="51.9446%" y="693" width="0.6372%" height="15" fill="rgb(222,198,25)"/><text x="52.1946%" y="703.50"></text></g><g><title>loopback_xmit (25 samples, 0.55%)</title><rect x="52.0325%" y="677" width="0.5493%" height="15" fill="rgb(211,99,13)"/><text x="52.2825%" y="687.50"></text></g><g><title>tcp_wfree (9 samples, 0.20%)</title><rect x="52.3841%" y="661" width="0.1978%" height="15" fill="rgb(232,111,31)"/><text x="52.6341%" y="671.50"></text></g><g><title>__dev_queue_xmit (40 samples, 0.88%)</title><rect x="51.8348%" y="709" width="0.8789%" height="15" fill="rgb(245,82,37)"/><text x="52.0848%" y="719.50"></text></g><g><title>validate_xmit_skb (5 samples, 0.11%)</title><rect x="52.6038%" y="693" width="0.1099%" height="15" fill="rgb(227,149,46)"/><text x="52.8538%" y="703.50"></text></g><g><title>__kfree_skb_flush (5 samples, 0.11%)</title><rect x="53.2191%" y="629" width="0.1099%" height="15" fill="rgb(218,36,50)"/><text x="53.4691%" y="639.50"></text></g><g><title>__netif_receive_skb_core (6 samples, 0.13%)</title><rect x="53.5047%" y="597" width="0.1318%" height="15" fill="rgb(226,80,48)"/><text x="53.7547%" y="607.50"></text></g><g><title>__inet_lookup_established (11 samples, 0.24%)</title><rect x="53.8343%" y="517" width="0.2417%" height="15" fill="rgb(238,224,15)"/><text x="54.0843%" y="527.50"></text></g><g><title>sk_filter_trim_cap (10 samples, 0.22%)</title><rect x="54.1200%" y="517" width="0.2197%" height="15" fill="rgb(241,136,10)"/><text x="54.3700%" y="527.50"></text></g><g><title>security_sock_rcv_skb (5 samples, 0.11%)</title><rect x="54.2298%" y="501" width="0.1099%" height="15" fill="rgb(208,32,45)"/><text x="54.4798%" y="511.50"></text></g><g><title>sk_reset_timer (6 samples, 0.13%)</title><rect x="54.4496%" y="485" width="0.1318%" height="15" fill="rgb(207,135,9)"/><text x="54.6996%" y="495.50"></text></g><g><title>kfree (5 samples, 0.11%)</title><rect x="55.1088%" y="453" width="0.1099%" height="15" fill="rgb(206,86,44)"/><text x="55.3588%" y="463.50"></text></g><g><title>__kfree_skb (14 samples, 0.31%)</title><rect x="55.0428%" y="469" width="0.3076%" height="15" fill="rgb(245,177,15)"/><text x="55.2928%" y="479.50"></text></g><g><title>skb_release_data (6 samples, 0.13%)</title><rect x="55.2186%" y="453" width="0.1318%" height="15" fill="rgb(206,64,50)"/><text x="55.4686%" y="463.50"></text></g><g><title>tcp_ack (60 samples, 1.32%)</title><rect x="54.5814%" y="485" width="1.3184%" height="15" fill="rgb(234,36,40)"/><text x="54.8314%" y="495.50"></text></g><g><title>tcp_check_space (6 samples, 0.13%)</title><rect x="55.8998%" y="485" width="0.1318%" height="15" fill="rgb(213,64,8)"/><text x="56.1498%" y="495.50"></text></g><g><title>dst_release (5 samples, 0.11%)</title><rect x="56.1195%" y="469" width="0.1099%" height="15" fill="rgb(210,75,36)"/><text x="56.3695%" y="479.50"></text></g><g><title>sock_def_readable (192 samples, 4.22%)</title><rect x="56.2294%" y="469" width="4.2189%" height="15" fill="rgb(229,88,21)"/><text x="56.4794%" y="479.50">sock_..</text></g><g><title>__wake_up_common_lock (188 samples, 4.13%)</title><rect x="56.3173%" y="453" width="4.1310%" height="15" fill="rgb(252,204,47)"/><text x="56.5673%" y="463.50">__wak..</text></g><g><title>_raw_spin_unlock_irqrestore (185 samples, 4.07%)</title><rect x="56.3832%" y="437" width="4.0650%" height="15" fill="rgb(208,77,27)"/><text x="56.6332%" y="447.50">_raw..</text></g><g><title>tcp_event_data_recv (6 samples, 0.13%)</title><rect x="60.4702%" y="469" width="0.1318%" height="15" fill="rgb(221,76,26)"/><text x="60.7202%" y="479.50"></text></g><g><title>tcp_data_queue (209 samples, 4.59%)</title><rect x="56.0316%" y="485" width="4.5924%" height="15" fill="rgb(225,139,18)"/><text x="56.2816%" y="495.50">tcp_d..</text></g><g><title>tcp_v4_do_rcv (290 samples, 6.37%)</title><rect x="54.3617%" y="517" width="6.3722%" height="15" fill="rgb(230,137,11)"/><text x="54.6117%" y="527.50">tcp_v4_d..</text></g><g><title>tcp_rcv_established (289 samples, 6.35%)</title><rect x="54.3837%" y="501" width="6.3503%" height="15" fill="rgb(212,28,1)"/><text x="54.6337%" y="511.50">tcp_rcv_..</text></g><g><title>ip_local_deliver (324 samples, 7.12%)</title><rect x="53.6585%" y="581" width="7.1193%" height="15" fill="rgb(248,164,17)"/><text x="53.9085%" y="591.50">ip_local_d..</text></g><g><title>ip_local_deliver_finish (323 samples, 7.10%)</title><rect x="53.6805%" y="565" width="7.0973%" height="15" fill="rgb(222,171,42)"/><text x="53.9305%" y="575.50">ip_local_d..</text></g><g><title>ip_protocol_deliver_rcu (323 samples, 7.10%)</title><rect x="53.6805%" y="549" width="7.0973%" height="15" fill="rgb(243,84,45)"/><text x="53.9305%" y="559.50">ip_protoco..</text></g><g><title>tcp_v4_rcv (318 samples, 6.99%)</title><rect x="53.7904%" y="533" width="6.9875%" height="15" fill="rgb(252,49,23)"/><text x="54.0404%" y="543.50">tcp_v4_rcv</text></g><g><title>ip_finish_output2 (422 samples, 9.27%)</title><rect x="51.5711%" y="725" width="9.2727%" height="15" fill="rgb(215,19,7)"/><text x="51.8211%" y="735.50">ip_finish_out..</text></g><g><title>__local_bh_enable_ip (370 samples, 8.13%)</title><rect x="52.7137%" y="709" width="8.1301%" height="15" fill="rgb(238,81,41)"/><text x="52.9637%" y="719.50">__local_bh_..</text></g><g><title>do_softirq.part.0 (368 samples, 8.09%)</title><rect x="52.7576%" y="693" width="8.0861%" height="15" fill="rgb(210,199,37)"/><text x="53.0076%" y="703.50">do_softirq...</text></g><g><title>do_softirq_own_stack (366 samples, 8.04%)</title><rect x="52.8016%" y="677" width="8.0422%" height="15" fill="rgb(244,192,49)"/><text x="53.0516%" y="687.50">do_softirq_..</text></g><g><title>__softirqentry_text_start (366 samples, 8.04%)</title><rect x="52.8016%" y="661" width="8.0422%" height="15" fill="rgb(226,211,11)"/><text x="53.0516%" y="671.50">__softirqen..</text></g><g><title>net_rx_action (355 samples, 7.80%)</title><rect x="53.0433%" y="645" width="7.8005%" height="15" fill="rgb(236,162,54)"/><text x="53.2933%" y="655.50">net_rx_acti..</text></g><g><title>process_backlog (342 samples, 7.51%)</title><rect x="53.3289%" y="629" width="7.5148%" height="15" fill="rgb(220,229,9)"/><text x="53.5789%" y="639.50">process_ba..</text></g><g><title>__netif_receive_skb_one_core (336 samples, 7.38%)</title><rect x="53.4608%" y="613" width="7.3830%" height="15" fill="rgb(250,87,22)"/><text x="53.7108%" y="623.50">__netif_re..</text></g><g><title>ip_rcv (328 samples, 7.21%)</title><rect x="53.6366%" y="597" width="7.2072%" height="15" fill="rgb(239,43,17)"/><text x="53.8866%" y="607.50">ip_rcv</text></g><g><title>ip_finish_output (8 samples, 0.18%)</title><rect x="60.8438%" y="725" width="0.1758%" height="15" fill="rgb(231,177,25)"/><text x="61.0938%" y="735.50"></text></g><g><title>__cgroup_bpf_run_filter_skb (8 samples, 0.18%)</title><rect x="60.8438%" y="709" width="0.1758%" height="15" fill="rgb(219,179,1)"/><text x="61.0938%" y="719.50"></text></g><g><title>__ip_queue_xmit (452 samples, 9.93%)</title><rect x="51.1536%" y="757" width="9.9319%" height="15" fill="rgb(238,219,53)"/><text x="51.4036%" y="767.50">__ip_queue_xmit</text></g><g><title>ip_output (440 samples, 9.67%)</title><rect x="51.4173%" y="741" width="9.6682%" height="15" fill="rgb(232,167,36)"/><text x="51.6673%" y="751.50">ip_output</text></g><g><title>__skb_clone (5 samples, 0.11%)</title><rect x="61.0855%" y="757" width="0.1099%" height="15" fill="rgb(244,19,51)"/><text x="61.3355%" y="767.50"></text></g><g><title>bictcp_cwnd_event (5 samples, 0.11%)</title><rect x="61.1953%" y="757" width="0.1099%" height="15" fill="rgb(224,6,22)"/><text x="61.4453%" y="767.50"></text></g><g><title>__tcp_transmit_skb (480 samples, 10.55%)</title><rect x="50.8679%" y="773" width="10.5471%" height="15" fill="rgb(224,145,5)"/><text x="51.1179%" y="783.50">__tcp_transmit_..</text></g><g><title>ktime_get (9 samples, 0.20%)</title><rect x="61.4151%" y="773" width="0.1978%" height="15" fill="rgb(234,130,49)"/><text x="61.6651%" y="783.50"></text></g><g><title>read_tsc (5 samples, 0.11%)</title><rect x="61.5030%" y="757" width="0.1099%" height="15" fill="rgb(254,6,2)"/><text x="61.7530%" y="767.50"></text></g><g><title>tcp_event_new_data_sent (7 samples, 0.15%)</title><rect x="61.6128%" y="773" width="0.1538%" height="15" fill="rgb(208,96,46)"/><text x="61.8628%" y="783.50"></text></g><g><title>__tcp_push_pending_frames (512 samples, 11.25%)</title><rect x="50.6043%" y="805" width="11.2503%" height="15" fill="rgb(239,3,39)"/><text x="50.8543%" y="815.50">__tcp_push_pendin..</text></g><g><title>tcp_write_xmit (511 samples, 11.23%)</title><rect x="50.6262%" y="789" width="11.2283%" height="15" fill="rgb(233,210,1)"/><text x="50.8762%" y="799.50">tcp_write_xmit</text></g><g><title>_copy_from_iter_full (10 samples, 0.22%)</title><rect x="61.8545%" y="805" width="0.2197%" height="15" fill="rgb(244,137,37)"/><text x="62.1045%" y="815.50"></text></g><g><title>copyin (10 samples, 0.22%)</title><rect x="61.8545%" y="789" width="0.2197%" height="15" fill="rgb(240,136,2)"/><text x="62.1045%" y="799.50"></text></g><g><title>copy_user_generic_unrolled (9 samples, 0.20%)</title><rect x="61.8765%" y="773" width="0.1978%" height="15" fill="rgb(239,18,37)"/><text x="62.1265%" y="783.50"></text></g><g><title>sk_page_frag_refill (6 samples, 0.13%)</title><rect x="62.0743%" y="805" width="0.1318%" height="15" fill="rgb(218,185,22)"/><text x="62.3243%" y="815.50"></text></g><g><title>__kmalloc_reserve.isra.0 (8 samples, 0.18%)</title><rect x="62.3160%" y="773" width="0.1758%" height="15" fill="rgb(225,218,4)"/><text x="62.5660%" y="783.50"></text></g><g><title>__kmalloc_node_track_caller (7 samples, 0.15%)</title><rect x="62.3379%" y="757" width="0.1538%" height="15" fill="rgb(230,182,32)"/><text x="62.5879%" y="767.50"></text></g><g><title>kmem_cache_alloc_node (7 samples, 0.15%)</title><rect x="62.5577%" y="773" width="0.1538%" height="15" fill="rgb(242,56,43)"/><text x="62.8077%" y="783.50"></text></g><g><title>sk_stream_alloc_skb (24 samples, 0.53%)</title><rect x="62.2061%" y="805" width="0.5274%" height="15" fill="rgb(233,99,24)"/><text x="62.4561%" y="815.50"></text></g><g><title>__alloc_skb (23 samples, 0.51%)</title><rect x="62.2281%" y="789" width="0.5054%" height="15" fill="rgb(234,209,42)"/><text x="62.4781%" y="799.50"></text></g><g><title>skb_entail (5 samples, 0.11%)</title><rect x="62.7335%" y="805" width="0.1099%" height="15" fill="rgb(227,7,12)"/><text x="62.9835%" y="815.50"></text></g><g><title>tcp_send_mss (9 samples, 0.20%)</title><rect x="62.8653%" y="805" width="0.1978%" height="15" fill="rgb(245,203,43)"/><text x="63.1153%" y="815.50"></text></g><g><title>tcp_current_mss (8 samples, 0.18%)</title><rect x="62.8873%" y="789" width="0.1758%" height="15" fill="rgb(238,205,33)"/><text x="63.1373%" y="799.50"></text></g><g><title>ipv4_mtu (6 samples, 0.13%)</title><rect x="62.9312%" y="773" width="0.1318%" height="15" fill="rgb(231,56,7)"/><text x="63.1812%" y="783.50"></text></g><g><title>do_iter_readv_writev (615 samples, 13.51%)</title><rect x="49.6155%" y="885" width="13.5135%" height="15" fill="rgb(244,186,29)"/><text x="49.8655%" y="895.50">do_iter_readv_writev</text></g><g><title>sock_write_iter (609 samples, 13.38%)</title><rect x="49.7473%" y="869" width="13.3817%" height="15" fill="rgb(234,111,31)"/><text x="49.9973%" y="879.50">sock_write_iter</text></g><g><title>sock_sendmsg (606 samples, 13.32%)</title><rect x="49.8132%" y="853" width="13.3158%" height="15" fill="rgb(241,149,10)"/><text x="50.0632%" y="863.50">sock_sendmsg</text></g><g><title>tcp_sendmsg (585 samples, 12.85%)</title><rect x="50.2747%" y="837" width="12.8543%" height="15" fill="rgb(249,206,44)"/><text x="50.5247%" y="847.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (578 samples, 12.70%)</title><rect x="50.4285%" y="821" width="12.7005%" height="15" fill="rgb(251,153,30)"/><text x="50.6785%" y="831.50">tcp_sendmsg_locked</text></g><g><title>do_iter_write (643 samples, 14.13%)</title><rect x="49.3518%" y="901" width="14.1288%" height="15" fill="rgb(239,152,38)"/><text x="49.6018%" y="911.50">do_iter_write</text></g><g><title>security_file_permission (12 samples, 0.26%)</title><rect x="63.2169%" y="885" width="0.2637%" height="15" fill="rgb(249,139,47)"/><text x="63.4669%" y="895.50"></text></g><g><title>common_file_perm (7 samples, 0.15%)</title><rect x="63.3267%" y="869" width="0.1538%" height="15" fill="rgb(244,64,35)"/><text x="63.5767%" y="879.50"></text></g><g><title>do_writev (673 samples, 14.79%)</title><rect x="48.9782%" y="933" width="14.7880%" height="15" fill="rgb(216,46,15)"/><text x="49.2282%" y="943.50">do_writev</text></g><g><title>vfs_writev (661 samples, 14.52%)</title><rect x="49.2419%" y="917" width="14.5243%" height="15" fill="rgb(250,74,19)"/><text x="49.4919%" y="927.50">vfs_writev</text></g><g><title>import_iovec (13 samples, 0.29%)</title><rect x="63.4806%" y="901" width="0.2857%" height="15" fill="rgb(249,42,33)"/><text x="63.7306%" y="911.50"></text></g><g><title>rw_copy_check_uvector (11 samples, 0.24%)</title><rect x="63.5245%" y="885" width="0.2417%" height="15" fill="rgb(242,149,17)"/><text x="63.7745%" y="895.50"></text></g><g><title>_copy_from_user (8 samples, 0.18%)</title><rect x="63.5904%" y="869" width="0.1758%" height="15" fill="rgb(244,29,21)"/><text x="63.8404%" y="879.50"></text></g><g><title>copy_user_generic_unrolled (7 samples, 0.15%)</title><rect x="63.6124%" y="853" width="0.1538%" height="15" fill="rgb(220,130,37)"/><text x="63.8624%" y="863.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (776 samples, 17.05%)</title><rect x="48.4729%" y="965" width="17.0512%" height="15" fill="rgb(211,67,2)"/><text x="48.7229%" y="975.50">entry_SYSCALL_64_after_hwf..</text></g><g><title>do_syscall_64 (776 samples, 17.05%)</title><rect x="48.4729%" y="949" width="17.0512%" height="15" fill="rgb(235,68,52)"/><text x="48.7229%" y="959.50">do_syscall_64</text></g><g><title>exit_to_usermode_loop (80 samples, 1.76%)</title><rect x="63.7662%" y="933" width="1.7579%" height="15" fill="rgb(246,142,3)"/><text x="64.0162%" y="943.50"></text></g><g><title>schedule (74 samples, 1.63%)</title><rect x="63.8980%" y="917" width="1.6260%" height="15" fill="rgb(241,25,7)"/><text x="64.1480%" y="927.50"></text></g><g><title>__sched_text_start (71 samples, 1.56%)</title><rect x="63.9640%" y="901" width="1.5601%" height="15" fill="rgb(242,119,39)"/><text x="64.2140%" y="911.50"></text></g><g><title>finish_task_switch (68 samples, 1.49%)</title><rect x="64.0299%" y="885" width="1.4942%" height="15" fill="rgb(241,98,45)"/><text x="64.2799%" y="895.50"></text></g><g><title>__GI___writev (841 samples, 18.48%)</title><rect x="47.2204%" y="981" width="18.4795%" height="15" fill="rgb(254,28,30)"/><text x="47.4704%" y="991.50">__GI___writev</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.18%)</title><rect x="65.5241%" y="965" width="0.1758%" height="15" fill="rgb(241,142,54)"/><text x="65.7741%" y="975.50"></text></g><g><title>prepare_exit_to_usermode (8 samples, 0.18%)</title><rect x="65.5241%" y="949" width="0.1758%" height="15" fill="rgb(222,85,15)"/><text x="65.7741%" y="959.50"></text></g><g><title>exit_to_usermode_loop (8 samples, 0.18%)</title><rect x="65.5241%" y="933" width="0.1758%" height="15" fill="rgb(210,85,47)"/><text x="65.7741%" y="943.50"></text></g><g><title>__GI___writev (843 samples, 18.52%)</title><rect x="47.1984%" y="997" width="18.5234%" height="15" fill="rgb(224,206,25)"/><text x="47.4484%" y="1007.50">__GI___writev</text></g><g><title>mio::net::tcp::TcpStream::write_bufs (851 samples, 18.70%)</title><rect x="47.0886%" y="1045" width="18.6992%" height="15" fill="rgb(243,201,19)"/><text x="47.3386%" y="1055.50">mio::net::tcp::TcpStream::wri..</text></g><g><title>mio::sys::unix::tcp::TcpStream::writev (851 samples, 18.70%)</title><rect x="47.0886%" y="1029" width="18.6992%" height="15" fill="rgb(236,59,4)"/><text x="47.3386%" y="1039.50">mio::sys::unix::tcp::TcpStrea..</text></g><g><title>&lt;T as mio::sys::unix::uio::VecIo&gt;::writev (851 samples, 18.70%)</title><rect x="47.0886%" y="1013" width="18.6992%" height="15" fill="rgb(254,179,45)"/><text x="47.3386%" y="1023.50">&lt;T as mio::sys::unix::uio::Ve..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (915 samples, 20.11%)</title><rect x="46.0998%" y="1141" width="20.1055%" height="15" fill="rgb(226,14,10)"/><text x="46.3498%" y="1151.50">hyper::proto::h1::dispatch::Disp..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (915 samples, 20.11%)</title><rect x="46.0998%" y="1125" width="20.1055%" height="15" fill="rgb(244,27,41)"/><text x="46.3498%" y="1135.50">hyper::proto::h1::conn::Conn&lt;I,B..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (915 samples, 20.11%)</title><rect x="46.0998%" y="1109" width="20.1055%" height="15" fill="rgb(235,35,32)"/><text x="46.3498%" y="1119.50">hyper::proto::h1::io::Buffered&lt;T..</text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_buf (915 samples, 20.11%)</title><rect x="46.0998%" y="1093" width="20.1055%" height="15" fill="rgb(218,68,31)"/><text x="46.3498%" y="1103.50">&lt;hyper::server::tcp::addr_stream..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_buf (915 samples, 20.11%)</title><rect x="46.0998%" y="1077" width="20.1055%" height="15" fill="rgb(207,120,37)"/><text x="46.3498%" y="1087.50">&lt;tokio::net::tcp::stream::TcpStr..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_buf_priv (915 samples, 20.11%)</title><rect x="46.0998%" y="1061" width="20.1055%" height="15" fill="rgb(227,98,0)"/><text x="46.3498%" y="1071.50">tokio::net::tcp::stream::TcpStre..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_ready (16 samples, 0.35%)</title><rect x="65.8537%" y="1045" width="0.3516%" height="15" fill="rgb(207,7,3)"/><text x="66.1037%" y="1055.50"></text></g><g><title>tokio::io::registration::Registration::take_write_ready (9 samples, 0.20%)</title><rect x="66.0075%" y="1029" width="0.1978%" height="15" fill="rgb(206,98,19)"/><text x="66.2575%" y="1039.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready (8 samples, 0.18%)</title><rect x="66.0294%" y="1013" width="0.1758%" height="15" fill="rgb(217,5,26)"/><text x="66.2794%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.15%)</title><rect x="66.2931%" y="1013" width="0.1538%" height="15" fill="rgb(235,190,38)"/><text x="66.5431%" y="1023.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (7 samples, 0.15%)</title><rect x="66.2931%" y="997" width="0.1538%" height="15" fill="rgb(247,86,24)"/><text x="66.5431%" y="1007.50"></text></g><g><title>core::sync::atomic::atomic_add (7 samples, 0.15%)</title><rect x="66.2931%" y="981" width="0.1538%" height="15" fill="rgb(205,101,16)"/><text x="66.5431%" y="991.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.24%)</title><rect x="66.2272%" y="1045" width="0.2417%" height="15" fill="rgb(246,168,33)"/><text x="66.4772%" y="1055.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::clone::Clone&gt;::clone (11 samples, 0.24%)</title><rect x="66.2272%" y="1029" width="0.2417%" height="15" fill="rgb(231,114,1)"/><text x="66.4772%" y="1039.50"></text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (14 samples, 0.31%)</title><rect x="66.2272%" y="1093" width="0.3076%" height="15" fill="rgb(207,184,53)"/><text x="66.4772%" y="1103.50"></text></g><g><title>&lt;hyper::service::util::ServiceFn&lt;F,ReqBody&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (14 samples, 0.31%)</title><rect x="66.2272%" y="1077" width="0.3076%" height="15" fill="rgb(224,95,51)"/><text x="66.4772%" y="1087.50"></text></g><g><title>rtest5::main::{{closure}}::{{closure}}::{{closure}}::{{closure}} (14 samples, 0.31%)</title><rect x="66.2272%" y="1061" width="0.3076%" height="15" fill="rgb(212,188,45)"/><text x="66.4772%" y="1071.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.42%)</title><rect x="66.5348%" y="1093" width="0.4175%" height="15" fill="rgb(223,154,38)"/><text x="66.7848%" y="1103.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.13%)</title><rect x="66.8205%" y="1077" width="0.1318%" height="15" fill="rgb(251,22,52)"/><text x="67.0705%" y="1087.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.13%)</title><rect x="66.8205%" y="1061" width="0.1318%" height="15" fill="rgb(229,209,22)"/><text x="67.0705%" y="1071.50"></text></g><g><title>exit_to_usermode_loop (6 samples, 0.13%)</title><rect x="66.8205%" y="1045" width="0.1318%" height="15" fill="rgb(234,138,34)"/><text x="67.0705%" y="1055.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (45 samples, 0.99%)</title><rect x="66.9523%" y="1093" width="0.9888%" height="15" fill="rgb(212,95,11)"/><text x="67.2023%" y="1103.50"></text></g><g><title>__memmove_avx_unaligned_erms (44 samples, 0.97%)</title><rect x="66.9743%" y="1077" width="0.9668%" height="15" fill="rgb(240,179,47)"/><text x="67.2243%" y="1087.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.11%)</title><rect x="67.8312%" y="1061" width="0.1099%" height="15" fill="rgb(240,163,11)"/><text x="68.0812%" y="1071.50"></text></g><g><title>prepare_exit_to_usermode (5 samples, 0.11%)</title><rect x="67.8312%" y="1045" width="0.1099%" height="15" fill="rgb(236,37,12)"/><text x="68.0812%" y="1055.50"></text></g><g><title>exit_to_usermode_loop (5 samples, 0.11%)</title><rect x="67.8312%" y="1029" width="0.1099%" height="15" fill="rgb(232,164,16)"/><text x="68.0812%" y="1039.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (84 samples, 1.85%)</title><rect x="66.2052%" y="1109" width="1.8457%" height="15" fill="rgb(244,205,15)"/><text x="66.4552%" y="1119.50">&lt;..</text></g><g><title>skb_release_all (6 samples, 0.13%)</title><rect x="70.0066%" y="757" width="0.1318%" height="15" fill="rgb(223,117,47)"/><text x="70.2566%" y="767.50"></text></g><g><title>skb_release_head_state (6 samples, 0.13%)</title><rect x="70.0066%" y="741" width="0.1318%" height="15" fill="rgb(244,107,35)"/><text x="70.2566%" y="751.50"></text></g><g><title>sock_rfree (6 samples, 0.13%)</title><rect x="70.0066%" y="725" width="0.1318%" height="15" fill="rgb(205,140,8)"/><text x="70.2566%" y="735.50"></text></g><g><title>__kfree_skb (9 samples, 0.20%)</title><rect x="69.9846%" y="773" width="0.1978%" height="15" fill="rgb(228,84,46)"/><text x="70.2346%" y="783.50"></text></g><g><title>_copy_to_iter (38 samples, 0.83%)</title><rect x="70.4021%" y="741" width="0.8350%" height="15" fill="rgb(254,188,9)"/><text x="70.6521%" y="751.50"></text></g><g><title>copyout (36 samples, 0.79%)</title><rect x="70.4461%" y="725" width="0.7910%" height="15" fill="rgb(206,112,54)"/><text x="70.6961%" y="735.50"></text></g><g><title>copy_user_generic_unrolled (36 samples, 0.79%)</title><rect x="70.4461%" y="709" width="0.7910%" height="15" fill="rgb(216,84,49)"/><text x="70.6961%" y="719.50"></text></g><g><title>skb_copy_datagram_iter (53 samples, 1.16%)</title><rect x="70.2922%" y="773" width="1.1646%" height="15" fill="rgb(214,194,35)"/><text x="70.5422%" y="783.50"></text></g><g><title>__skb_datagram_iter (53 samples, 1.16%)</title><rect x="70.2922%" y="757" width="1.1646%" height="15" fill="rgb(249,28,3)"/><text x="70.5422%" y="767.50"></text></g><g><title>simple_copy_to_iter (10 samples, 0.22%)</title><rect x="71.2371%" y="741" width="0.2197%" height="15" fill="rgb(222,56,52)"/><text x="71.4871%" y="751.50"></text></g><g><title>__check_object_size (10 samples, 0.22%)</title><rect x="71.2371%" y="725" width="0.2197%" height="15" fill="rgb(245,217,50)"/><text x="71.4871%" y="735.50"></text></g><g><title>inet_recvmsg (95 samples, 2.09%)</title><rect x="69.6330%" y="805" width="2.0875%" height="15" fill="rgb(213,201,24)"/><text x="69.8830%" y="815.50">i..</text></g><g><title>tcp_recvmsg (88 samples, 1.93%)</title><rect x="69.7869%" y="789" width="1.9336%" height="15" fill="rgb(248,116,28)"/><text x="70.0369%" y="799.50">t..</text></g><g><title>tcp_rcv_space_adjust (10 samples, 0.22%)</title><rect x="71.5008%" y="773" width="0.2197%" height="15" fill="rgb(219,72,43)"/><text x="71.7508%" y="783.50"></text></g><g><title>tcp_mstamp_refresh (8 samples, 0.18%)</title><rect x="71.5447%" y="757" width="0.1758%" height="15" fill="rgb(209,138,14)"/><text x="71.7947%" y="767.50"></text></g><g><title>ktime_get (7 samples, 0.15%)</title><rect x="71.5667%" y="741" width="0.1538%" height="15" fill="rgb(222,18,33)"/><text x="71.8167%" y="751.50"></text></g><g><title>read_tsc (5 samples, 0.11%)</title><rect x="71.6106%" y="725" width="0.1099%" height="15" fill="rgb(213,199,7)"/><text x="71.8606%" y="735.50"></text></g><g><title>aa_sk_perm (6 samples, 0.13%)</title><rect x="71.7644%" y="773" width="0.1318%" height="15" fill="rgb(250,110,10)"/><text x="72.0144%" y="783.50"></text></g><g><title>sock_recvmsg (11 samples, 0.24%)</title><rect x="71.7205%" y="805" width="0.2417%" height="15" fill="rgb(248,123,6)"/><text x="71.9705%" y="815.50"></text></g><g><title>security_socket_recvmsg (11 samples, 0.24%)</title><rect x="71.7205%" y="789" width="0.2417%" height="15" fill="rgb(206,91,31)"/><text x="71.9705%" y="799.50"></text></g><g><title>__x64_sys_recvfrom (124 samples, 2.72%)</title><rect x="69.4573%" y="837" width="2.7247%" height="15" fill="rgb(211,154,13)"/><text x="69.7073%" y="847.50">__..</text></g><g><title>__sys_recvfrom (122 samples, 2.68%)</title><rect x="69.5012%" y="821" width="2.6807%" height="15" fill="rgb(225,148,7)"/><text x="69.7512%" y="831.50">__..</text></g><g><title>sockfd_lookup_light (10 samples, 0.22%)</title><rect x="71.9622%" y="805" width="0.2197%" height="15" fill="rgb(220,160,43)"/><text x="72.2122%" y="815.50"></text></g><g><title>__fget_light (8 samples, 0.18%)</title><rect x="72.0062%" y="789" width="0.1758%" height="15" fill="rgb(213,52,39)"/><text x="72.2562%" y="799.50"></text></g><g><title>__fget_files (7 samples, 0.15%)</title><rect x="72.0281%" y="773" width="0.1538%" height="15" fill="rgb(243,137,7)"/><text x="72.2781%" y="783.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (146 samples, 3.21%)</title><rect x="68.9958%" y="869" width="3.2081%" height="15" fill="rgb(230,79,13)"/><text x="69.2458%" y="879.50">ent..</text></g><g><title>do_syscall_64 (146 samples, 3.21%)</title><rect x="68.9958%" y="853" width="3.2081%" height="15" fill="rgb(247,105,23)"/><text x="69.2458%" y="863.50">do_..</text></g><g><title>__libc_recv (179 samples, 3.93%)</title><rect x="68.4025%" y="885" width="3.9332%" height="15" fill="rgb(223,179,41)"/><text x="68.6525%" y="895.50">__li..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.13%)</title><rect x="72.2039%" y="869" width="0.1318%" height="15" fill="rgb(218,9,34)"/><text x="72.4539%" y="879.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.13%)</title><rect x="72.2039%" y="853" width="0.1318%" height="15" fill="rgb(222,106,8)"/><text x="72.4539%" y="863.50"></text></g><g><title>exit_to_usermode_loop (6 samples, 0.13%)</title><rect x="72.2039%" y="837" width="0.1318%" height="15" fill="rgb(211,220,0)"/><text x="72.4539%" y="847.50"></text></g><g><title>__libc_recv (185 samples, 4.07%)</title><rect x="68.2927%" y="901" width="4.0650%" height="15" fill="rgb(229,52,16)"/><text x="68.5427%" y="911.50">__li..</text></g><g><title>&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (192 samples, 4.22%)</title><rect x="68.2048%" y="997" width="4.2189%" height="15" fill="rgb(212,155,18)"/><text x="68.4548%" y="1007.50">&lt;&amp;mio..</text></g><g><title>&lt;&amp;mio::sys::unix::tcp::TcpStream as std::io::Read&gt;::read (192 samples, 4.22%)</title><rect x="68.2048%" y="981" width="4.2189%" height="15" fill="rgb(242,21,14)"/><text x="68.4548%" y="991.50">&lt;&amp;mio..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (192 samples, 4.22%)</title><rect x="68.2048%" y="965" width="4.2189%" height="15" fill="rgb(222,19,48)"/><text x="68.4548%" y="975.50">&lt;&amp;std..</text></g><g><title>std::sys_common::net::TcpStream::read (188 samples, 4.13%)</title><rect x="68.2927%" y="949" width="4.1310%" height="15" fill="rgb(232,45,27)"/><text x="68.5427%" y="959.50">std::..</text></g><g><title>std::sys::unix::net::Socket::read (188 samples, 4.13%)</title><rect x="68.2927%" y="933" width="4.1310%" height="15" fill="rgb(249,103,42)"/><text x="68.5427%" y="943.50">std::..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (188 samples, 4.13%)</title><rect x="68.2927%" y="917" width="4.1310%" height="15" fill="rgb(246,81,33)"/><text x="68.5427%" y="927.50">std::..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register (7 samples, 0.15%)</title><rect x="72.8631%" y="933" width="0.1538%" height="15" fill="rgb(252,33,42)"/><text x="73.1131%" y="943.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (7 samples, 0.15%)</title><rect x="72.8631%" y="917" width="0.1538%" height="15" fill="rgb(209,212,41)"/><text x="73.1131%" y="927.50"></text></g><g><title>tokio::io::driver::Inner::register (8 samples, 0.18%)</title><rect x="72.8631%" y="949" width="0.1758%" height="15" fill="rgb(207,154,6)"/><text x="73.1131%" y="959.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (229 samples, 5.03%)</title><rect x="68.1389%" y="1029" width="5.0319%" height="15" fill="rgb(223,64,47)"/><text x="68.3889%" y="1039.50">&lt;tokio..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (228 samples, 5.01%)</title><rect x="68.1608%" y="1013" width="5.0099%" height="15" fill="rgb(211,161,38)"/><text x="68.4108%" y="1023.50">tokio:..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (34 samples, 0.75%)</title><rect x="72.4236%" y="997" width="0.7471%" height="15" fill="rgb(219,138,40)"/><text x="72.6736%" y="1007.50"></text></g><g><title>tokio::io::registration::Registration::poll_read_ready (26 samples, 0.57%)</title><rect x="72.5994%" y="981" width="0.5713%" height="15" fill="rgb(241,228,46)"/><text x="72.8494%" y="991.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready (24 samples, 0.53%)</title><rect x="72.6434%" y="965" width="0.5274%" height="15" fill="rgb(223,209,38)"/><text x="72.8934%" y="975.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (1,233 samples, 27.09%)</title><rect x="46.0998%" y="1237" width="27.0929%" height="15" fill="rgb(236,164,45)"/><text x="46.3498%" y="1247.50">&lt;hyper::server::conn::upgrades::Upgradeable..</text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (1,233 samples, 27.09%)</title><rect x="46.0998%" y="1221" width="27.0929%" height="15" fill="rgb(231,15,5)"/><text x="46.3498%" y="1231.50">&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; ..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (1,233 samples, 27.09%)</title><rect x="46.0998%" y="1205" width="27.0929%" height="15" fill="rgb(252,35,15)"/><text x="46.3498%" y="1215.50">&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,B..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (1,233 samples, 27.09%)</title><rect x="46.0998%" y="1189" width="27.0929%" height="15" fill="rgb(248,181,18)"/><text x="46.3498%" y="1199.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (1,233 samples, 27.09%)</title><rect x="46.0998%" y="1173" width="27.0929%" height="15" fill="rgb(233,39,42)"/><text x="46.3498%" y="1183.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (1,233 samples, 27.09%)</title><rect x="46.0998%" y="1157" width="27.0929%" height="15" fill="rgb(238,110,33)"/><text x="46.3498%" y="1167.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (318 samples, 6.99%)</title><rect x="66.2052%" y="1141" width="6.9875%" height="15" fill="rgb(233,195,10)"/><text x="66.4552%" y="1151.50">hyper::pr..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (318 samples, 6.99%)</title><rect x="66.2052%" y="1125" width="6.9875%" height="15" fill="rgb(254,105,3)"/><text x="66.4552%" y="1135.50">hyper::pr..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (234 samples, 5.14%)</title><rect x="68.0510%" y="1109" width="5.1417%" height="15" fill="rgb(221,225,9)"/><text x="68.3010%" y="1119.50">hyper:..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (234 samples, 5.14%)</title><rect x="68.0510%" y="1093" width="5.1417%" height="15" fill="rgb(224,227,45)"/><text x="68.3010%" y="1103.50">hyper:..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (234 samples, 5.14%)</title><rect x="68.0510%" y="1077" width="5.1417%" height="15" fill="rgb(229,198,43)"/><text x="68.3010%" y="1087.50">hyper:..</text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_read::AsyncRead&gt;::poll_read_buf (234 samples, 5.14%)</title><rect x="68.0510%" y="1061" width="5.1417%" height="15" fill="rgb(206,209,35)"/><text x="68.3010%" y="1071.50">&lt;hyper..</text></g><g><title>tokio::io::async_read::AsyncRead::poll_read_buf (234 samples, 5.14%)</title><rect x="68.0510%" y="1045" width="5.1417%" height="15" fill="rgb(245,195,53)"/><text x="68.3010%" y="1055.50">tokio:..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10 samples, 0.22%)</title><rect x="73.1927%" y="1237" width="0.2197%" height="15" fill="rgb(240,92,26)"/><text x="73.4427%" y="1247.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.22%)</title><rect x="73.1927%" y="1221" width="0.2197%" height="15" fill="rgb(207,40,23)"/><text x="73.4427%" y="1231.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::{{closure}} (10 samples, 0.22%)</title><rect x="73.1927%" y="1205" width="0.2197%" height="15" fill="rgb(223,111,35)"/><text x="73.4427%" y="1215.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (10 samples, 0.22%)</title><rect x="73.1927%" y="1189" width="0.2197%" height="15" fill="rgb(229,147,28)"/><text x="73.4427%" y="1199.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10 samples, 0.22%)</title><rect x="73.1927%" y="1173" width="0.2197%" height="15" fill="rgb(211,29,28)"/><text x="73.4427%" y="1183.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (10 samples, 0.22%)</title><rect x="73.1927%" y="1157" width="0.2197%" height="15" fill="rgb(228,72,33)"/><text x="73.4427%" y="1167.50"></text></g><g><title>&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (10 samples, 0.22%)</title><rect x="73.1927%" y="1141" width="0.2197%" height="15" fill="rgb(205,214,31)"/><text x="73.4427%" y="1151.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (10 samples, 0.22%)</title><rect x="73.1927%" y="1125" width="0.2197%" height="15" fill="rgb(224,111,15)"/><text x="73.4427%" y="1135.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (6 samples, 0.13%)</title><rect x="73.2806%" y="1109" width="0.1318%" height="15" fill="rgb(253,21,26)"/><text x="73.5306%" y="1119.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.13%)</title><rect x="73.2806%" y="1093" width="0.1318%" height="15" fill="rgb(245,139,43)"/><text x="73.5306%" y="1103.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (5 samples, 0.11%)</title><rect x="73.3026%" y="1077" width="0.1099%" height="15" fill="rgb(252,170,7)"/><text x="73.5526%" y="1087.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.11%)</title><rect x="73.7860%" y="1189" width="0.1099%" height="15" fill="rgb(231,118,14)"/><text x="74.0360%" y="1199.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse::{{closure}} (5 samples, 0.11%)</title><rect x="73.7860%" y="1173" width="0.1099%" height="15" fill="rgb(238,83,0)"/><text x="74.0360%" y="1183.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (5 samples, 0.11%)</title><rect x="73.9837%" y="1189" width="0.1099%" height="15" fill="rgb(221,39,39)"/><text x="74.2337%" y="1199.50"></text></g><g><title>&lt;http::uri::Uri as core::str::FromStr&gt;::from_str (5 samples, 0.11%)</title><rect x="73.9837%" y="1173" width="0.1099%" height="15" fill="rgb(222,119,46)"/><text x="74.2337%" y="1183.50"></text></g><g><title>&lt;http::uri::Uri as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (5 samples, 0.11%)</title><rect x="73.9837%" y="1157" width="0.1099%" height="15" fill="rgb(222,165,49)"/><text x="74.2337%" y="1167.50"></text></g><g><title>http::uri::Uri::from_shared (5 samples, 0.11%)</title><rect x="73.9837%" y="1141" width="0.1099%" height="15" fill="rgb(219,113,52)"/><text x="74.2337%" y="1151.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (47 samples, 1.03%)</title><rect x="73.4124%" y="1237" width="1.0327%" height="15" fill="rgb(214,7,15)"/><text x="73.6624%" y="1247.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (47 samples, 1.03%)</title><rect x="73.4124%" y="1221" width="1.0327%" height="15" fill="rgb(235,32,4)"/><text x="73.6624%" y="1231.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (47 samples, 1.03%)</title><rect x="73.4124%" y="1205" width="1.0327%" height="15" fill="rgb(238,90,54)"/><text x="73.6624%" y="1215.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (14 samples, 0.31%)</title><rect x="74.5111%" y="1157" width="0.3076%" height="15" fill="rgb(213,208,19)"/><text x="74.7611%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.29%)</title><rect x="74.5331%" y="1141" width="0.2857%" height="15" fill="rgb(233,156,4)"/><text x="74.7831%" y="1151.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.29%)</title><rect x="74.5331%" y="1125" width="0.2857%" height="15" fill="rgb(207,194,5)"/><text x="74.7831%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.22%)</title><rect x="74.5990%" y="1109" width="0.2197%" height="15" fill="rgb(206,111,30)"/><text x="74.8490%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.22%)</title><rect x="74.5990%" y="1093" width="0.2197%" height="15" fill="rgb(243,70,54)"/><text x="74.8490%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.22%)</title><rect x="74.5990%" y="1077" width="0.2197%" height="15" fill="rgb(242,28,8)"/><text x="74.8490%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.22%)</title><rect x="74.5990%" y="1061" width="0.2197%" height="15" fill="rgb(219,106,18)"/><text x="74.8490%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.22%)</title><rect x="74.5990%" y="1045" width="0.2197%" height="15" fill="rgb(244,222,10)"/><text x="74.8490%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.22%)</title><rect x="74.5990%" y="1029" width="0.2197%" height="15" fill="rgb(236,179,52)"/><text x="74.8490%" y="1039.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.22%)</title><rect x="74.5990%" y="1013" width="0.2197%" height="15" fill="rgb(213,23,39)"/><text x="74.8490%" y="1023.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (21 samples, 0.46%)</title><rect x="74.5111%" y="1205" width="0.4614%" height="15" fill="rgb(238,48,10)"/><text x="74.7611%" y="1215.50"></text></g><g><title>&lt;http::uri::Uri as core::str::FromStr&gt;::from_str (21 samples, 0.46%)</title><rect x="74.5111%" y="1189" width="0.4614%" height="15" fill="rgb(251,196,23)"/><text x="74.7611%" y="1199.50"></text></g><g><title>&lt;http::uri::Uri as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (21 samples, 0.46%)</title><rect x="74.5111%" y="1173" width="0.4614%" height="15" fill="rgb(250,152,24)"/><text x="74.7611%" y="1183.50"></text></g><g><title>http::uri::Uri::from_shared (7 samples, 0.15%)</title><rect x="74.8187%" y="1157" width="0.1538%" height="15" fill="rgb(209,150,17)"/><text x="75.0687%" y="1167.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append (17 samples, 0.37%)</title><rect x="74.9725%" y="1205" width="0.3735%" height="15" fill="rgb(234,202,34)"/><text x="75.2225%" y="1215.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::append (12 samples, 0.26%)</title><rect x="75.0824%" y="1189" width="0.2637%" height="15" fill="rgb(253,148,53)"/><text x="75.3324%" y="1199.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append2 (12 samples, 0.26%)</title><rect x="75.0824%" y="1173" width="0.2637%" height="15" fill="rgb(218,129,16)"/><text x="75.3324%" y="1183.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve (9 samples, 0.20%)</title><rect x="75.3461%" y="1205" width="0.1978%" height="15" fill="rgb(216,85,19)"/><text x="75.5961%" y="1215.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (23 samples, 0.51%)</title><rect x="75.5438%" y="1205" width="0.5054%" height="15" fill="rgb(235,228,7)"/><text x="75.7938%" y="1215.50"></text></g><g><title>http::header::name::parse_hdr (19 samples, 0.42%)</title><rect x="75.6317%" y="1189" width="0.4175%" height="15" fill="rgb(245,175,0)"/><text x="75.8817%" y="1199.50"></text></g><g><title>httparse::simd::runtime::match_header_value_vectored (5 samples, 0.11%)</title><rect x="76.2470%" y="1173" width="0.1099%" height="15" fill="rgb(208,168,36)"/><text x="76.4970%" y="1183.50"></text></g><g><title>httparse::simd::avx2::match_header_value_batch_32 (5 samples, 0.11%)</title><rect x="76.2470%" y="1157" width="0.1099%" height="15" fill="rgb(246,171,24)"/><text x="76.4970%" y="1167.50"></text></g><g><title>httparse::parse_headers_iter (13 samples, 0.29%)</title><rect x="76.1591%" y="1189" width="0.2857%" height="15" fill="rgb(215,142,24)"/><text x="76.4091%" y="1199.50"></text></g><g><title>httparse::parse_uri (5 samples, 0.11%)</title><rect x="76.4667%" y="1189" width="0.1099%" height="15" fill="rgb(250,187,7)"/><text x="76.7167%" y="1199.50"></text></g><g><title>httparse::simd::runtime::match_uri_vectored (5 samples, 0.11%)</title><rect x="76.4667%" y="1173" width="0.1099%" height="15" fill="rgb(228,66,33)"/><text x="76.7167%" y="1183.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (101 samples, 2.22%)</title><rect x="74.4452%" y="1237" width="2.2193%" height="15" fill="rgb(234,215,21)"/><text x="74.6952%" y="1247.50">h..</text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (101 samples, 2.22%)</title><rect x="74.4452%" y="1221" width="2.2193%" height="15" fill="rgb(222,191,20)"/><text x="74.6952%" y="1231.50">&lt;..</text></g><g><title>httparse::Request::parse (24 samples, 0.53%)</title><rect x="76.1371%" y="1205" width="0.5274%" height="15" fill="rgb(245,79,54)"/><text x="76.3871%" y="1215.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (7 samples, 0.15%)</title><rect x="76.7304%" y="629" width="0.1538%" height="15" fill="rgb(240,10,37)"/><text x="76.9804%" y="639.50"></text></g><g><title>[unknown] (3,503 samples, 76.97%)</title><rect x="0.0000%" y="1253" width="76.9721%" height="15" fill="rgb(214,192,32)"/><text x="0.2500%" y="1263.50">[unknown]</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (14 samples, 0.31%)</title><rect x="76.6645%" y="1237" width="0.3076%" height="15" fill="rgb(209,36,54)"/><text x="76.9145%" y="1247.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (14 samples, 0.31%)</title><rect x="76.6645%" y="1221" width="0.3076%" height="15" fill="rgb(220,10,11)"/><text x="76.9145%" y="1231.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (14 samples, 0.31%)</title><rect x="76.6645%" y="1205" width="0.3076%" height="15" fill="rgb(221,106,17)"/><text x="76.9145%" y="1215.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (14 samples, 0.31%)</title><rect x="76.6645%" y="1189" width="0.3076%" height="15" fill="rgb(251,142,44)"/><text x="76.9145%" y="1199.50"></text></g><g><title>std::panic::catch_unwind (14 samples, 0.31%)</title><rect x="76.6645%" y="1173" width="0.3076%" height="15" fill="rgb(238,13,15)"/><text x="76.9145%" y="1183.50"></text></g><g><title>std::panicking::try (14 samples, 0.31%)</title><rect x="76.6645%" y="1157" width="0.3076%" height="15" fill="rgb(208,107,27)"/><text x="76.9145%" y="1167.50"></text></g><g><title>std::panicking::try::do_call (14 samples, 0.31%)</title><rect x="76.6645%" y="1141" width="0.3076%" height="15" fill="rgb(205,136,37)"/><text x="76.9145%" y="1151.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (14 samples, 0.31%)</title><rect x="76.6645%" y="1125" width="0.3076%" height="15" fill="rgb(250,205,27)"/><text x="76.9145%" y="1135.50"></text></g><g><title>core::ops::function::FnOnce::call_once (14 samples, 0.31%)</title><rect x="76.6645%" y="1109" width="0.3076%" height="15" fill="rgb(210,80,43)"/><text x="76.9145%" y="1119.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::{{closure}} (14 samples, 0.31%)</title><rect x="76.6645%" y="1093" width="0.3076%" height="15" fill="rgb(247,160,36)"/><text x="76.9145%" y="1103.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (14 samples, 0.31%)</title><rect x="76.6645%" y="1077" width="0.3076%" height="15" fill="rgb(234,13,49)"/><text x="76.9145%" y="1087.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (14 samples, 0.31%)</title><rect x="76.6645%" y="1061" width="0.3076%" height="15" fill="rgb(234,122,0)"/><text x="76.9145%" y="1071.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (14 samples, 0.31%)</title><rect x="76.6645%" y="1045" width="0.3076%" height="15" fill="rgb(207,146,38)"/><text x="76.9145%" y="1055.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.31%)</title><rect x="76.6645%" y="1029" width="0.3076%" height="15" fill="rgb(207,177,25)"/><text x="76.9145%" y="1039.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (14 samples, 0.31%)</title><rect x="76.6645%" y="1013" width="0.3076%" height="15" fill="rgb(211,178,42)"/><text x="76.9145%" y="1023.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (14 samples, 0.31%)</title><rect x="76.6645%" y="997" width="0.3076%" height="15" fill="rgb(230,69,54)"/><text x="76.9145%" y="1007.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (14 samples, 0.31%)</title><rect x="76.6645%" y="981" width="0.3076%" height="15" fill="rgb(214,135,41)"/><text x="76.9145%" y="991.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (14 samples, 0.31%)</title><rect x="76.6645%" y="965" width="0.3076%" height="15" fill="rgb(237,67,25)"/><text x="76.9145%" y="975.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (14 samples, 0.31%)</title><rect x="76.6645%" y="949" width="0.3076%" height="15" fill="rgb(222,189,50)"/><text x="76.9145%" y="959.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (14 samples, 0.31%)</title><rect x="76.6645%" y="933" width="0.3076%" height="15" fill="rgb(245,148,34)"/><text x="76.9145%" y="943.50"></text></g><g><title>tokio::coop::budget (14 samples, 0.31%)</title><rect x="76.6645%" y="917" width="0.3076%" height="15" fill="rgb(222,29,6)"/><text x="76.9145%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14 samples, 0.31%)</title><rect x="76.6645%" y="901" width="0.3076%" height="15" fill="rgb(221,189,43)"/><text x="76.9145%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.31%)</title><rect x="76.6645%" y="885" width="0.3076%" height="15" fill="rgb(207,36,27)"/><text x="76.9145%" y="895.50"></text></g><g><title>tokio::coop::budget::{{closure}} (14 samples, 0.31%)</title><rect x="76.6645%" y="869" width="0.3076%" height="15" fill="rgb(217,90,24)"/><text x="76.9145%" y="879.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (14 samples, 0.31%)</title><rect x="76.6645%" y="853" width="0.3076%" height="15" fill="rgb(224,66,35)"/><text x="76.9145%" y="863.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (14 samples, 0.31%)</title><rect x="76.6645%" y="837" width="0.3076%" height="15" fill="rgb(221,13,50)"/><text x="76.9145%" y="847.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (14 samples, 0.31%)</title><rect x="76.6645%" y="821" width="0.3076%" height="15" fill="rgb(236,68,49)"/><text x="76.9145%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (14 samples, 0.31%)</title><rect x="76.6645%" y="805" width="0.3076%" height="15" fill="rgb(229,146,28)"/><text x="76.9145%" y="815.50"></text></g><g><title>std::panic::catch_unwind (14 samples, 0.31%)</title><rect x="76.6645%" y="789" width="0.3076%" height="15" fill="rgb(225,31,38)"/><text x="76.9145%" y="799.50"></text></g><g><title>std::panicking::try (14 samples, 0.31%)</title><rect x="76.6645%" y="773" width="0.3076%" height="15" fill="rgb(250,208,3)"/><text x="76.9145%" y="783.50"></text></g><g><title>std::panicking::try::do_call (14 samples, 0.31%)</title><rect x="76.6645%" y="757" width="0.3076%" height="15" fill="rgb(246,54,23)"/><text x="76.9145%" y="767.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (14 samples, 0.31%)</title><rect x="76.6645%" y="741" width="0.3076%" height="15" fill="rgb(243,76,11)"/><text x="76.9145%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once (14 samples, 0.31%)</title><rect x="76.6645%" y="725" width="0.3076%" height="15" fill="rgb(245,21,50)"/><text x="76.9145%" y="735.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::{{closure}} (14 samples, 0.31%)</title><rect x="76.6645%" y="709" width="0.3076%" height="15" fill="rgb(228,9,43)"/><text x="76.9145%" y="719.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (14 samples, 0.31%)</title><rect x="76.6645%" y="693" width="0.3076%" height="15" fill="rgb(208,100,47)"/><text x="76.9145%" y="703.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (14 samples, 0.31%)</title><rect x="76.6645%" y="677" width="0.3076%" height="15" fill="rgb(232,26,8)"/><text x="76.9145%" y="687.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (14 samples, 0.31%)</title><rect x="76.6645%" y="661" width="0.3076%" height="15" fill="rgb(216,166,38)"/><text x="76.9145%" y="671.50"></text></g><g><title>&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (14 samples, 0.31%)</title><rect x="76.6645%" y="645" width="0.3076%" height="15" fill="rgb(251,202,51)"/><text x="76.9145%" y="655.50"></text></g><g><title>mio::sys::unix::epoll::Selector::select (10 samples, 0.22%)</title><rect x="77.0160%" y="501" width="0.2197%" height="15" fill="rgb(254,216,34)"/><text x="77.2660%" y="511.50"></text></g><g><title>epoll_wait (9 samples, 0.20%)</title><rect x="77.0380%" y="485" width="0.1978%" height="15" fill="rgb(251,32,27)"/><text x="77.2880%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.15%)</title><rect x="77.0820%" y="469" width="0.1538%" height="15" fill="rgb(208,127,28)"/><text x="77.3320%" y="479.50"></text></g><g><title>do_syscall_64 (7 samples, 0.15%)</title><rect x="77.0820%" y="453" width="0.1538%" height="15" fill="rgb(224,137,22)"/><text x="77.3320%" y="463.50"></text></g><g><title>__x64_sys_epoll_wait (6 samples, 0.13%)</title><rect x="77.1039%" y="437" width="0.1318%" height="15" fill="rgb(254,70,32)"/><text x="77.3539%" y="447.50"></text></g><g><title>do_epoll_wait (6 samples, 0.13%)</title><rect x="77.1039%" y="421" width="0.1318%" height="15" fill="rgb(229,75,37)"/><text x="77.3539%" y="431.50"></text></g><g><title>ep_poll (6 samples, 0.13%)</title><rect x="77.1039%" y="405" width="0.1318%" height="15" fill="rgb(252,64,23)"/><text x="77.3539%" y="415.50"></text></g><g><title>ep_scan_ready_list.constprop.0 (5 samples, 0.11%)</title><rect x="77.1259%" y="389" width="0.1099%" height="15" fill="rgb(232,162,48)"/><text x="77.3759%" y="399.50"></text></g><g><title>mio::poll::Poll::poll (11 samples, 0.24%)</title><rect x="77.0160%" y="549" width="0.2417%" height="15" fill="rgb(246,160,12)"/><text x="77.2660%" y="559.50"></text></g><g><title>mio::poll::Poll::poll1 (11 samples, 0.24%)</title><rect x="77.0160%" y="533" width="0.2417%" height="15" fill="rgb(247,166,0)"/><text x="77.2660%" y="543.50"></text></g><g><title>mio::poll::Poll::poll2 (11 samples, 0.24%)</title><rect x="77.0160%" y="517" width="0.2417%" height="15" fill="rgb(249,219,21)"/><text x="77.2660%" y="527.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (13 samples, 0.29%)</title><rect x="77.0160%" y="597" width="0.2857%" height="15" fill="rgb(205,209,3)"/><text x="77.2660%" y="607.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (13 samples, 0.29%)</title><rect x="77.0160%" y="581" width="0.2857%" height="15" fill="rgb(243,44,1)"/><text x="77.2660%" y="591.50"></text></g><g><title>tokio::io::driver::Driver::turn (13 samples, 0.29%)</title><rect x="77.0160%" y="565" width="0.2857%" height="15" fill="rgb(206,159,16)"/><text x="77.2660%" y="575.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (15 samples, 0.33%)</title><rect x="77.0160%" y="677" width="0.3296%" height="15" fill="rgb(244,77,30)"/><text x="77.2660%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (15 samples, 0.33%)</title><rect x="77.0160%" y="661" width="0.3296%" height="15" fill="rgb(218,69,12)"/><text x="77.2660%" y="671.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (15 samples, 0.33%)</title><rect x="77.0160%" y="645" width="0.3296%" height="15" fill="rgb(212,87,7)"/><text x="77.2660%" y="655.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (15 samples, 0.33%)</title><rect x="77.0160%" y="629" width="0.3296%" height="15" fill="rgb(245,114,25)"/><text x="77.2660%" y="639.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;T&gt; as tokio::park::Park&gt;::park_timeout (15 samples, 0.33%)</title><rect x="77.0160%" y="613" width="0.3296%" height="15" fill="rgb(210,61,42)"/><text x="77.2660%" y="623.50"></text></g><g><title>__GI___sched_yield (13 samples, 0.29%)</title><rect x="77.4116%" y="613" width="0.2857%" height="15" fill="rgb(211,52,33)"/><text x="77.6616%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.18%)</title><rect x="77.5214%" y="597" width="0.1758%" height="15" fill="rgb(234,58,33)"/><text x="77.7714%" y="607.50"></text></g><g><title>do_syscall_64 (8 samples, 0.18%)</title><rect x="77.5214%" y="581" width="0.1758%" height="15" fill="rgb(220,115,36)"/><text x="77.7714%" y="591.50"></text></g><g><title>__x64_sys_sched_yield (5 samples, 0.11%)</title><rect x="77.5873%" y="565" width="0.1099%" height="15" fill="rgb(243,153,54)"/><text x="77.8373%" y="575.50"></text></g><g><title>schedule (5 samples, 0.11%)</title><rect x="77.5873%" y="549" width="0.1099%" height="15" fill="rgb(251,47,18)"/><text x="77.8373%" y="559.50"></text></g><g><title>__sched_text_start (5 samples, 0.11%)</title><rect x="77.5873%" y="533" width="0.1099%" height="15" fill="rgb(242,102,42)"/><text x="77.8373%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.31%)</title><rect x="77.8510%" y="437" width="0.3076%" height="15" fill="rgb(234,31,38)"/><text x="78.1010%" y="447.50"></text></g><g><title>do_syscall_64 (14 samples, 0.31%)</title><rect x="77.8510%" y="421" width="0.3076%" height="15" fill="rgb(221,117,51)"/><text x="78.1010%" y="431.50"></text></g><g><title>__x64_sys_epoll_wait (14 samples, 0.31%)</title><rect x="77.8510%" y="405" width="0.3076%" height="15" fill="rgb(212,20,18)"/><text x="78.1010%" y="415.50"></text></g><g><title>do_epoll_wait (14 samples, 0.31%)</title><rect x="77.8510%" y="389" width="0.3076%" height="15" fill="rgb(245,133,36)"/><text x="78.1010%" y="399.50"></text></g><g><title>ep_poll (14 samples, 0.31%)</title><rect x="77.8510%" y="373" width="0.3076%" height="15" fill="rgb(212,6,19)"/><text x="78.1010%" y="383.50"></text></g><g><title>ep_scan_ready_list.constprop.0 (14 samples, 0.31%)</title><rect x="77.8510%" y="357" width="0.3076%" height="15" fill="rgb(218,1,36)"/><text x="78.1010%" y="367.50"></text></g><g><title>ep_send_events_proc (13 samples, 0.29%)</title><rect x="77.8730%" y="341" width="0.2857%" height="15" fill="rgb(246,84,54)"/><text x="78.1230%" y="351.50"></text></g><g><title>ep_item_poll.isra.0 (9 samples, 0.20%)</title><rect x="77.9609%" y="325" width="0.1978%" height="15" fill="rgb(242,110,6)"/><text x="78.2109%" y="335.50"></text></g><g><title>sock_poll (8 samples, 0.18%)</title><rect x="77.9829%" y="309" width="0.1758%" height="15" fill="rgb(214,47,5)"/><text x="78.2329%" y="319.50"></text></g><g><title>epoll_wait (19 samples, 0.42%)</title><rect x="77.7851%" y="453" width="0.4175%" height="15" fill="rgb(218,159,25)"/><text x="78.0351%" y="463.50"></text></g><g><title>mio::sys::unix::epoll::Selector::select (22 samples, 0.48%)</title><rect x="77.7631%" y="469" width="0.4834%" height="15" fill="rgb(215,211,28)"/><text x="78.0131%" y="479.50"></text></g><g><title>mio::poll::Poll::poll (26 samples, 0.57%)</title><rect x="77.7631%" y="517" width="0.5713%" height="15" fill="rgb(238,59,32)"/><text x="78.0131%" y="527.50"></text></g><g><title>mio::poll::Poll::poll1 (26 samples, 0.57%)</title><rect x="77.7631%" y="501" width="0.5713%" height="15" fill="rgb(226,82,3)"/><text x="78.0131%" y="511.50"></text></g><g><title>mio::poll::Poll::poll2 (26 samples, 0.57%)</title><rect x="77.7631%" y="485" width="0.5713%" height="15" fill="rgb(240,164,32)"/><text x="78.0131%" y="495.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (32 samples, 0.70%)</title><rect x="77.7631%" y="565" width="0.7031%" height="15" fill="rgb(232,46,7)"/><text x="78.0131%" y="575.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (32 samples, 0.70%)</title><rect x="77.7631%" y="549" width="0.7031%" height="15" fill="rgb(229,129,53)"/><text x="78.0131%" y="559.50"></text></g><g><title>tokio::io::driver::Driver::turn (32 samples, 0.70%)</title><rect x="77.7631%" y="533" width="0.7031%" height="15" fill="rgb(234,188,29)"/><text x="78.0131%" y="543.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (6 samples, 0.13%)</title><rect x="78.3344%" y="517" width="0.1318%" height="15" fill="rgb(246,141,4)"/><text x="78.5844%" y="527.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (54 samples, 1.19%)</title><rect x="77.3676%" y="645" width="1.1866%" height="15" fill="rgb(229,23,39)"/><text x="77.6176%" y="655.50"></text></g><g><title>tokio::runtime::park::Inner::park (54 samples, 1.19%)</title><rect x="77.3676%" y="629" width="1.1866%" height="15" fill="rgb(206,12,3)"/><text x="77.6176%" y="639.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (36 samples, 0.79%)</title><rect x="77.7631%" y="613" width="0.7910%" height="15" fill="rgb(252,226,20)"/><text x="78.0131%" y="623.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (36 samples, 0.79%)</title><rect x="77.7631%" y="597" width="0.7910%" height="15" fill="rgb(216,123,35)"/><text x="78.0131%" y="607.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;T&gt; as tokio::park::Park&gt;::park (36 samples, 0.79%)</title><rect x="77.7631%" y="581" width="0.7910%" height="15" fill="rgb(212,68,40)"/><text x="78.0131%" y="591.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (58 samples, 1.27%)</title><rect x="77.3456%" y="677" width="1.2744%" height="15" fill="rgb(254,125,32)"/><text x="77.5956%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (57 samples, 1.25%)</title><rect x="77.3676%" y="661" width="1.2525%" height="15" fill="rgb(253,97,22)"/><text x="77.6176%" y="671.50"></text></g><g><title>__GI___sched_yield (5 samples, 0.11%)</title><rect x="79.2793%" y="165" width="0.1099%" height="15" fill="rgb(241,101,14)"/><text x="79.5293%" y="175.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (6 samples, 0.13%)</title><rect x="79.2793%" y="181" width="0.1318%" height="15" fill="rgb(238,103,29)"/><text x="79.5293%" y="191.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (10 samples, 0.22%)</title><rect x="79.2573%" y="197" width="0.2197%" height="15" fill="rgb(233,195,47)"/><text x="79.5073%" y="207.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.64%)</title><rect x="79.1035%" y="325" width="0.6372%" height="15" fill="rgb(246,218,30)"/><text x="79.3535%" y="335.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (29 samples, 0.64%)</title><rect x="79.1035%" y="309" width="0.6372%" height="15" fill="rgb(219,145,47)"/><text x="79.3535%" y="319.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (29 samples, 0.64%)</title><rect x="79.1035%" y="293" width="0.6372%" height="15" fill="rgb(243,12,26)"/><text x="79.3535%" y="303.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (29 samples, 0.64%)</title><rect x="79.1035%" y="277" width="0.6372%" height="15" fill="rgb(214,87,16)"/><text x="79.3535%" y="287.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::poll_recv (29 samples, 0.64%)</title><rect x="79.1035%" y="261" width="0.6372%" height="15" fill="rgb(208,99,42)"/><text x="79.3535%" y="271.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (29 samples, 0.64%)</title><rect x="79.1035%" y="245" width="0.6372%" height="15" fill="rgb(253,99,2)"/><text x="79.3535%" y="255.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (25 samples, 0.55%)</title><rect x="79.1914%" y="229" width="0.5493%" height="15" fill="rgb(220,168,23)"/><text x="79.4414%" y="239.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (23 samples, 0.51%)</title><rect x="79.2353%" y="213" width="0.5054%" height="15" fill="rgb(242,38,24)"/><text x="79.4853%" y="223.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (9 samples, 0.20%)</title><rect x="79.5430%" y="197" width="0.1978%" height="15" fill="rgb(225,182,9)"/><text x="79.7930%" y="207.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (7 samples, 0.15%)</title><rect x="79.5869%" y="181" width="0.1538%" height="15" fill="rgb(243,178,37)"/><text x="79.8369%" y="191.50"></text></g><g><title>LZ4HC_Insert (33 samples, 0.73%)</title><rect x="80.0923%" y="117" width="0.7251%" height="15" fill="rgb(232,139,19)"/><text x="80.3423%" y="127.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.13%)</title><rect x="80.6856%" y="101" width="0.1318%" height="15" fill="rgb(225,201,24)"/><text x="80.9356%" y="111.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.13%)</title><rect x="80.6856%" y="85" width="0.1318%" height="15" fill="rgb(221,47,46)"/><text x="80.9356%" y="95.50"></text></g><g><title>exit_to_usermode_loop (6 samples, 0.13%)</title><rect x="80.6856%" y="69" width="0.1318%" height="15" fill="rgb(249,23,13)"/><text x="80.9356%" y="79.50"></text></g><g><title>LZ4_read_ARCH (30 samples, 0.66%)</title><rect x="81.2129%" y="101" width="0.6592%" height="15" fill="rgb(219,9,5)"/><text x="81.4629%" y="111.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (10 samples, 0.22%)</title><rect x="81.6524%" y="85" width="0.2197%" height="15" fill="rgb(254,171,16)"/><text x="81.9024%" y="95.50"></text></g><g><title>prepare_exit_to_usermode (10 samples, 0.22%)</title><rect x="81.6524%" y="69" width="0.2197%" height="15" fill="rgb(230,171,20)"/><text x="81.9024%" y="79.50"></text></g><g><title>exit_to_usermode_loop (10 samples, 0.22%)</title><rect x="81.6524%" y="53" width="0.2197%" height="15" fill="rgb(210,71,41)"/><text x="81.9024%" y="63.50"></text></g><g><title>LZ4_count (54 samples, 1.19%)</title><rect x="80.8174%" y="117" width="1.1866%" height="15" fill="rgb(206,173,20)"/><text x="81.0674%" y="127.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.13%)</title><rect x="81.8721%" y="101" width="0.1318%" height="15" fill="rgb(233,88,34)"/><text x="82.1221%" y="111.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.13%)</title><rect x="81.8721%" y="85" width="0.1318%" height="15" fill="rgb(223,209,46)"/><text x="82.1221%" y="95.50"></text></g><g><title>exit_to_usermode_loop (6 samples, 0.13%)</title><rect x="81.8721%" y="69" width="0.1318%" height="15" fill="rgb(250,43,18)"/><text x="82.1221%" y="79.50"></text></g><g><title>LZ4HC_InsertAndFindBestMatch (91 samples, 2.00%)</title><rect x="80.0264%" y="149" width="1.9996%" height="15" fill="rgb(208,13,10)"/><text x="80.2764%" y="159.50">L..</text></g><g><title>LZ4HC_InsertAndGetWiderMatch (91 samples, 2.00%)</title><rect x="80.0264%" y="133" width="1.9996%" height="15" fill="rgb(212,200,36)"/><text x="80.2764%" y="143.50">L..</text></g><g><title>LZ4HC_Insert (357 samples, 7.84%)</title><rect x="82.1138%" y="133" width="7.8444%" height="15" fill="rgb(225,90,30)"/><text x="82.3638%" y="143.50">LZ4HC_Insert</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (112 samples, 2.46%)</title><rect x="87.4973%" y="117" width="2.4610%" height="15" fill="rgb(236,182,39)"/><text x="87.7473%" y="127.50">sw..</text></g><g><title>prepare_exit_to_usermode (112 samples, 2.46%)</title><rect x="87.4973%" y="101" width="2.4610%" height="15" fill="rgb(212,144,35)"/><text x="87.7473%" y="111.50">pr..</text></g><g><title>exit_to_usermode_loop (112 samples, 2.46%)</title><rect x="87.4973%" y="85" width="2.4610%" height="15" fill="rgb(228,63,44)"/><text x="87.7473%" y="95.50">ex..</text></g><g><title>schedule (8 samples, 0.18%)</title><rect x="89.7825%" y="69" width="0.1758%" height="15" fill="rgb(228,109,6)"/><text x="90.0325%" y="79.50"></text></g><g><title>__sched_text_start (7 samples, 0.15%)</title><rect x="89.8044%" y="53" width="0.1538%" height="15" fill="rgb(238,117,24)"/><text x="90.0544%" y="63.50"></text></g><g><title>finish_task_switch (6 samples, 0.13%)</title><rect x="89.8264%" y="37" width="0.1318%" height="15" fill="rgb(242,26,26)"/><text x="90.0764%" y="47.50"></text></g><g><title>LZ4HC_countBack (184 samples, 4.04%)</title><rect x="89.9583%" y="133" width="4.0431%" height="15" fill="rgb(221,92,48)"/><text x="90.2083%" y="143.50">LZ4H..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (55 samples, 1.21%)</title><rect x="92.7928%" y="117" width="1.2085%" height="15" fill="rgb(209,209,32)"/><text x="93.0428%" y="127.50"></text></g><g><title>prepare_exit_to_usermode (55 samples, 1.21%)</title><rect x="92.7928%" y="101" width="1.2085%" height="15" fill="rgb(221,70,22)"/><text x="93.0428%" y="111.50"></text></g><g><title>exit_to_usermode_loop (55 samples, 1.21%)</title><rect x="92.7928%" y="85" width="1.2085%" height="15" fill="rgb(248,145,5)"/><text x="93.0428%" y="95.50"></text></g><g><title>LZ4_read_ARCH (41 samples, 0.90%)</title><rect x="94.5726%" y="117" width="0.9009%" height="15" fill="rgb(226,116,26)"/><text x="94.8226%" y="127.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (12 samples, 0.26%)</title><rect x="95.2098%" y="101" width="0.2637%" height="15" fill="rgb(244,5,17)"/><text x="95.4598%" y="111.50"></text></g><g><title>prepare_exit_to_usermode (12 samples, 0.26%)</title><rect x="95.2098%" y="85" width="0.2637%" height="15" fill="rgb(252,159,33)"/><text x="95.4598%" y="95.50"></text></g><g><title>exit_to_usermode_loop (12 samples, 0.26%)</title><rect x="95.2098%" y="69" width="0.2637%" height="15" fill="rgb(206,71,0)"/><text x="95.4598%" y="79.50"></text></g><g><title>LZ4_count (81 samples, 1.78%)</title><rect x="94.0013%" y="133" width="1.7798%" height="15" fill="rgb(233,118,54)"/><text x="94.2513%" y="143.50">L..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (14 samples, 0.31%)</title><rect x="95.4735%" y="117" width="0.3076%" height="15" fill="rgb(234,83,48)"/><text x="95.7235%" y="127.50"></text></g><g><title>prepare_exit_to_usermode (14 samples, 0.31%)</title><rect x="95.4735%" y="101" width="0.3076%" height="15" fill="rgb(228,3,54)"/><text x="95.7235%" y="111.50"></text></g><g><title>exit_to_usermode_loop (14 samples, 0.31%)</title><rect x="95.4735%" y="85" width="0.3076%" height="15" fill="rgb(226,155,13)"/><text x="95.7235%" y="95.50"></text></g><g><title>LZ4HC_InsertAndGetWiderMatch (628 samples, 13.80%)</title><rect x="82.0259%" y="149" width="13.7992%" height="15" fill="rgb(241,28,37)"/><text x="82.2759%" y="159.50">LZ4HC_InsertAndGetWid..</text></g><g><title>LZ4F_makeBlock (725 samples, 15.93%)</title><rect x="80.0044%" y="293" width="15.9306%" height="15" fill="rgb(233,93,10)"/><text x="80.2544%" y="303.50">LZ4F_makeBlock</text></g><g><title>LZ4_compress_HC_continue (725 samples, 15.93%)</title><rect x="80.0044%" y="277" width="15.9306%" height="15" fill="rgb(225,113,19)"/><text x="80.2544%" y="287.50">LZ4_compress_HC_continue</text></g><g><title>LZ4_compressHC_continue_generic (725 samples, 15.93%)</title><rect x="80.0044%" y="261" width="15.9306%" height="15" fill="rgb(241,2,18)"/><text x="80.2544%" y="271.50">LZ4_compressHC_continue_g..</text></g><g><title>LZ4HC_compress_generic (725 samples, 15.93%)</title><rect x="80.0044%" y="245" width="15.9306%" height="15" fill="rgb(228,207,21)"/><text x="80.2544%" y="255.50">LZ4HC_compress_generic</text></g><g><title>LZ4HC_compress_generic (725 samples, 15.93%)</title><rect x="80.0044%" y="229" width="15.9306%" height="15" fill="rgb(213,211,35)"/><text x="80.2544%" y="239.50">LZ4HC_compress_generic</text></g><g><title>LZ4HC_compress_generic_noDictCtx (725 samples, 15.93%)</title><rect x="80.0044%" y="213" width="15.9306%" height="15" fill="rgb(209,83,10)"/><text x="80.2544%" y="223.50">LZ4HC_compress_generic_no..</text></g><g><title>LZ4HC_compress_generic_noDictCtx (725 samples, 15.93%)</title><rect x="80.0044%" y="197" width="15.9306%" height="15" fill="rgb(209,164,1)"/><text x="80.2544%" y="207.50">LZ4HC_compress_generic_no..</text></g><g><title>LZ4HC_compress_generic_internal (724 samples, 15.91%)</title><rect x="80.0264%" y="181" width="15.9086%" height="15" fill="rgb(213,184,43)"/><text x="80.2764%" y="191.50">LZ4HC_compress_generic_i..</text></g><g><title>LZ4HC_compress_hashChain (724 samples, 15.91%)</title><rect x="80.0264%" y="165" width="15.9086%" height="15" fill="rgb(231,61,34)"/><text x="80.2764%" y="175.50">LZ4HC_compress_hashChain</text></g><g><title>LZ4HC_encodeSequence (5 samples, 0.11%)</title><rect x="95.8251%" y="149" width="0.1099%" height="15" fill="rgb(235,75,3)"/><text x="96.0751%" y="159.50"></text></g><g><title>XXH32_round (35 samples, 0.77%)</title><rect x="96.0229%" y="261" width="0.7691%" height="15" fill="rgb(220,106,47)"/><text x="96.2729%" y="271.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (7 samples, 0.15%)</title><rect x="96.6381%" y="245" width="0.1538%" height="15" fill="rgb(210,196,33)"/><text x="96.8881%" y="255.50"></text></g><g><title>prepare_exit_to_usermode (7 samples, 0.15%)</title><rect x="96.6381%" y="229" width="0.1538%" height="15" fill="rgb(229,154,42)"/><text x="96.8881%" y="239.50"></text></g><g><title>exit_to_usermode_loop (7 samples, 0.15%)</title><rect x="96.6381%" y="213" width="0.1538%" height="15" fill="rgb(228,114,26)"/><text x="96.8881%" y="223.50"></text></g><g><title>XXH32_update (43 samples, 0.94%)</title><rect x="95.9350%" y="293" width="0.9448%" height="15" fill="rgb(208,144,1)"/><text x="96.1850%" y="303.50"></text></g><g><title>XXH32_update_endian (41 samples, 0.90%)</title><rect x="95.9789%" y="277" width="0.9009%" height="15" fill="rgb(239,112,37)"/><text x="96.2289%" y="287.50"></text></g><g><title>LZ4F_compressUpdate (806 samples, 17.71%)</title><rect x="79.8066%" y="309" width="17.7104%" height="15" fill="rgb(210,96,50)"/><text x="80.0566%" y="319.50">LZ4F_compressUpdate</text></g><g><title>__memmove_avx_unaligned_erms (29 samples, 0.64%)</title><rect x="96.8798%" y="293" width="0.6372%" height="15" fill="rgb(222,178,2)"/><text x="97.1298%" y="303.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (9 samples, 0.20%)</title><rect x="97.3193%" y="277" width="0.1978%" height="15" fill="rgb(226,74,18)"/><text x="97.5693%" y="287.50"></text></g><g><title>prepare_exit_to_usermode (9 samples, 0.20%)</title><rect x="97.3193%" y="261" width="0.1978%" height="15" fill="rgb(225,67,54)"/><text x="97.5693%" y="271.50"></text></g><g><title>exit_to_usermode_loop (9 samples, 0.20%)</title><rect x="97.3193%" y="245" width="0.1978%" height="15" fill="rgb(251,92,32)"/><text x="97.5693%" y="255.50"></text></g><g><title>ext4_block_write_begin (7 samples, 0.15%)</title><rect x="97.9125%" y="69" width="0.1538%" height="15" fill="rgb(228,149,22)"/><text x="98.1625%" y="79.50"></text></g><g><title>ext4_da_write_begin (10 samples, 0.22%)</title><rect x="97.8686%" y="85" width="0.2197%" height="15" fill="rgb(243,54,13)"/><text x="98.1186%" y="95.50"></text></g><g><title>new_sync_write (23 samples, 0.51%)</title><rect x="97.7587%" y="149" width="0.5054%" height="15" fill="rgb(243,180,28)"/><text x="98.0087%" y="159.50"></text></g><g><title>ext4_file_write_iter (23 samples, 0.51%)</title><rect x="97.7587%" y="133" width="0.5054%" height="15" fill="rgb(208,167,24)"/><text x="98.0087%" y="143.50"></text></g><g><title>ext4_buffered_write_iter (23 samples, 0.51%)</title><rect x="97.7587%" y="117" width="0.5054%" height="15" fill="rgb(245,73,45)"/><text x="98.0087%" y="127.50"></text></g><g><title>generic_perform_write (19 samples, 0.42%)</title><rect x="97.8466%" y="101" width="0.4175%" height="15" fill="rgb(237,203,48)"/><text x="98.0966%" y="111.50"></text></g><g><title>ext4_da_write_end (8 samples, 0.18%)</title><rect x="98.0883%" y="85" width="0.1758%" height="15" fill="rgb(211,197,16)"/><text x="98.3383%" y="95.50"></text></g><g><title>generic_write_end (6 samples, 0.13%)</title><rect x="98.1323%" y="69" width="0.1318%" height="15" fill="rgb(243,99,51)"/><text x="98.3823%" y="79.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (30 samples, 0.66%)</title><rect x="97.6269%" y="293" width="0.6592%" height="15" fill="rgb(215,123,29)"/><text x="97.8769%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::write (30 samples, 0.66%)</title><rect x="97.6269%" y="277" width="0.6592%" height="15" fill="rgb(239,186,37)"/><text x="97.8769%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (30 samples, 0.66%)</title><rect x="97.6269%" y="261" width="0.6592%" height="15" fill="rgb(252,136,39)"/><text x="97.8769%" y="271.50"></text></g><g><title>__libc_write (30 samples, 0.66%)</title><rect x="97.6269%" y="245" width="0.6592%" height="15" fill="rgb(223,213,32)"/><text x="97.8769%" y="255.50"></text></g><g><title>__libc_write (30 samples, 0.66%)</title><rect x="97.6269%" y="229" width="0.6592%" height="15" fill="rgb(233,115,5)"/><text x="97.8769%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (28 samples, 0.62%)</title><rect x="97.6708%" y="213" width="0.6152%" height="15" fill="rgb(207,226,44)"/><text x="97.9208%" y="223.50"></text></g><g><title>do_syscall_64 (28 samples, 0.62%)</title><rect x="97.6708%" y="197" width="0.6152%" height="15" fill="rgb(208,126,0)"/><text x="97.9208%" y="207.50"></text></g><g><title>ksys_write (25 samples, 0.55%)</title><rect x="97.7368%" y="181" width="0.5493%" height="15" fill="rgb(244,66,21)"/><text x="97.9868%" y="191.50"></text></g><g><title>vfs_write (24 samples, 0.53%)</title><rect x="97.7587%" y="165" width="0.5274%" height="15" fill="rgb(222,97,12)"/><text x="98.0087%" y="175.50"></text></g><g><title>&lt;lz4::encoder::Encoder&lt;W&gt; as std::io::Write&gt;::write (845 samples, 18.57%)</title><rect x="79.7407%" y="325" width="18.5673%" height="15" fill="rgb(219,213,19)"/><text x="79.9907%" y="335.50">&lt;lz4::encoder::Encoder&lt;W&gt; as ..</text></g><g><title>std::io::Write::write_all (34 samples, 0.75%)</title><rect x="97.5610%" y="309" width="0.7471%" height="15" fill="rgb(252,169,30)"/><text x="97.8110%" y="319.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (891 samples, 19.58%)</title><rect x="79.0156%" y="389" width="19.5781%" height="15" fill="rgb(206,32,51)"/><text x="79.2656%" y="399.50">&lt;core::future::from_generator::..</text></g><g><title>rtest5::main::{{closure}}::{{closure}} (888 samples, 19.51%)</title><rect x="79.0815%" y="373" width="19.5122%" height="15" fill="rgb(250,172,42)"/><text x="79.3315%" y="383.50">rtest5::main::{{closure}}::{{cl..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (888 samples, 19.51%)</title><rect x="79.0815%" y="357" width="19.5122%" height="15" fill="rgb(209,34,43)"/><text x="79.3315%" y="367.50">&lt;core::future::from_generator::..</text></g><g><title>rtest5::recorder::{{closure}} (888 samples, 19.51%)</title><rect x="79.0815%" y="341" width="19.5122%" height="15" fill="rgb(223,11,35)"/><text x="79.3315%" y="351.50">rtest5::recorder::{{closure}}</text></g><g><title>core::ptr::drop_in_place (13 samples, 0.29%)</title><rect x="98.3081%" y="325" width="0.2857%" height="15" fill="rgb(251,219,26)"/><text x="98.5581%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.29%)</title><rect x="98.3081%" y="309" width="0.2857%" height="15" fill="rgb(231,119,3)"/><text x="98.5581%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.29%)</title><rect x="98.3081%" y="293" width="0.2857%" height="15" fill="rgb(216,97,11)"/><text x="98.5581%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (13 samples, 0.29%)</title><rect x="98.3081%" y="277" width="0.2857%" height="15" fill="rgb(223,59,9)"/><text x="98.5581%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.29%)</title><rect x="98.3081%" y="261" width="0.2857%" height="15" fill="rgb(233,93,31)"/><text x="98.5581%" y="271.50"></text></g><g><title>_int_free (9 samples, 0.20%)</title><rect x="98.3960%" y="245" width="0.1978%" height="15" fill="rgb(239,81,33)"/><text x="98.6460%" y="255.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (897 samples, 19.71%)</title><rect x="78.9936%" y="485" width="19.7100%" height="15" fill="rgb(213,120,34)"/><text x="79.2436%" y="495.50">&lt;std::panic::AssertUnwindSafe&lt;F..</text></g><g><title>core::ops::function::FnOnce::call_once (896 samples, 19.69%)</title><rect x="79.0156%" y="469" width="19.6880%" height="15" fill="rgb(243,49,53)"/><text x="79.2656%" y="479.50">core::ops::function::FnOnce::ca..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::{{closure}} (896 samples, 19.69%)</title><rect x="79.0156%" y="453" width="19.6880%" height="15" fill="rgb(247,216,33)"/><text x="79.2656%" y="463.50">tokio::runtime::task::harness::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (896 samples, 19.69%)</title><rect x="79.0156%" y="437" width="19.6880%" height="15" fill="rgb(226,26,14)"/><text x="79.2656%" y="447.50">tokio::runtime::task::core::Cor..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (896 samples, 19.69%)</title><rect x="79.0156%" y="421" width="19.6880%" height="15" fill="rgb(215,49,53)"/><text x="79.2656%" y="431.50">tokio::loom::std::unsafe_cell::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (896 samples, 19.69%)</title><rect x="79.0156%" y="405" width="19.6880%" height="15" fill="rgb(245,162,40)"/><text x="79.2656%" y="415.50">tokio::runtime::task::core::Cor..</text></g><g><title>std::panic::catch_unwind (900 samples, 19.78%)</title><rect x="78.9936%" y="533" width="19.7759%" height="15" fill="rgb(229,68,17)"/><text x="79.2436%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (900 samples, 19.78%)</title><rect x="78.9936%" y="517" width="19.7759%" height="15" fill="rgb(213,182,10)"/><text x="79.2436%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (900 samples, 19.78%)</title><rect x="78.9936%" y="501" width="19.7759%" height="15" fill="rgb(245,125,30)"/><text x="79.2436%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.11%)</title><rect x="98.8134%" y="469" width="0.1099%" height="15" fill="rgb(232,202,2)"/><text x="99.0634%" y="479.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::yield_now (19 samples, 0.42%)</title><rect x="98.7915%" y="533" width="0.4175%" height="15" fill="rgb(237,140,51)"/><text x="99.0415%" y="543.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (19 samples, 0.42%)</title><rect x="98.7915%" y="517" width="0.4175%" height="15" fill="rgb(236,157,25)"/><text x="99.0415%" y="527.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::yield_now::{{closure}} (19 samples, 0.42%)</title><rect x="98.7915%" y="501" width="0.4175%" height="15" fill="rgb(219,209,0)"/><text x="99.0415%" y="511.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::yield_now (19 samples, 0.42%)</title><rect x="98.7915%" y="485" width="0.4175%" height="15" fill="rgb(240,116,54)"/><text x="99.0415%" y="495.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (13 samples, 0.29%)</title><rect x="98.9233%" y="469" width="0.2857%" height="15" fill="rgb(216,10,36)"/><text x="99.1733%" y="479.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (13 samples, 0.29%)</title><rect x="98.9233%" y="453" width="0.2857%" height="15" fill="rgb(222,72,44)"/><text x="99.1733%" y="463.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (9 samples, 0.20%)</title><rect x="99.0112%" y="437" width="0.1978%" height="15" fill="rgb(232,159,9)"/><text x="99.2612%" y="447.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (8 samples, 0.18%)</title><rect x="99.0332%" y="421" width="0.1758%" height="15" fill="rgb(210,39,32)"/><text x="99.2832%" y="431.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (6 samples, 0.13%)</title><rect x="99.0771%" y="405" width="0.1318%" height="15" fill="rgb(216,194,45)"/><text x="99.3271%" y="415.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (5 samples, 0.11%)</title><rect x="99.0991%" y="389" width="0.1099%" height="15" fill="rgb(218,18,35)"/><text x="99.3491%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (5 samples, 0.11%)</title><rect x="99.0991%" y="373" width="0.1099%" height="15" fill="rgb(207,83,51)"/><text x="99.3491%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (936 samples, 20.57%)</title><rect x="78.8838%" y="549" width="20.5669%" height="15" fill="rgb(225,63,43)"/><text x="79.1338%" y="559.50">tokio::runtime::task::harness::H..</text></g><g><title>tokio::coop::budget (953 samples, 20.94%)</title><rect x="78.6640%" y="661" width="20.9405%" height="15" fill="rgb(207,57,36)"/><text x="78.9140%" y="671.50">tokio::coop::budget</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (953 samples, 20.94%)</title><rect x="78.6640%" y="645" width="20.9405%" height="15" fill="rgb(216,99,33)"/><text x="78.9140%" y="655.50">std::thread::local::LocalKey&lt;T&gt;::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (951 samples, 20.90%)</title><rect x="78.7080%" y="629" width="20.8965%" height="15" fill="rgb(225,42,16)"/><text x="78.9580%" y="639.50">std::thread::local::LocalKey&lt;T&gt;::..</text></g><g><title>tokio::coop::budget::{{closure}} (950 samples, 20.87%)</title><rect x="78.7299%" y="613" width="20.8745%" height="15" fill="rgb(220,201,45)"/><text x="78.9799%" y="623.50">tokio::coop::budget::{{closure}}</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (949 samples, 20.85%)</title><rect x="78.7519%" y="597" width="20.8526%" height="15" fill="rgb(225,33,4)"/><text x="79.0019%" y="607.50">tokio::runtime::thread_pool::work..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (946 samples, 20.79%)</title><rect x="78.8178%" y="581" width="20.7866%" height="15" fill="rgb(224,33,50)"/><text x="79.0678%" y="591.50">tokio::runtime::task::Notified&lt;S&gt;..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (946 samples, 20.79%)</title><rect x="78.8178%" y="565" width="20.7866%" height="15" fill="rgb(246,198,51)"/><text x="79.0678%" y="575.50">tokio::runtime::task::raw::RawTas..</text></g><g><title>tokio::runtime::task::raw::poll (7 samples, 0.15%)</title><rect x="99.4507%" y="549" width="0.1538%" height="15" fill="rgb(205,22,4)"/><text x="99.7007%" y="559.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (957 samples, 21.03%)</title><rect x="78.6201%" y="677" width="21.0283%" height="15" fill="rgb(206,3,8)"/><text x="78.8701%" y="687.50">tokio::runtime::thread_pool::work..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task (10 samples, 0.22%)</title><rect x="99.6484%" y="677" width="0.2197%" height="15" fill="rgb(251,23,15)"/><text x="99.8984%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task (6 samples, 0.13%)</title><rect x="99.7363%" y="661" width="0.1318%" height="15" fill="rgb(252,88,28)"/><text x="99.9863%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (6 samples, 0.13%)</title><rect x="99.7363%" y="645" width="0.1318%" height="15" fill="rgb(212,127,14)"/><text x="99.9863%" y="655.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task::{{closure}} (6 samples, 0.13%)</title><rect x="99.7363%" y="629" width="0.1318%" height="15" fill="rgb(247,145,37)"/><text x="99.9863%" y="639.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::pop (6 samples, 0.13%)</title><rect x="99.7363%" y="613" width="0.1318%" height="15" fill="rgb(209,117,53)"/><text x="99.9863%" y="623.50"></text></g><g><title>all (4,551 samples, 100%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(212,90,42)"/><text x="0.2500%" y="1295.50"></text></g><g><title>tokio-runtime-w (4,551 samples, 100.00%)</title><rect x="0.0000%" y="1269" width="100.0000%" height="15" fill="rgb(218,164,37)"/><text x="0.2500%" y="1279.50">tokio-runtime-w</text></g><g><title>__GI___clone (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1253" width="23.0279%" height="15" fill="rgb(246,65,34)"/><text x="77.2221%" y="1263.50">__GI___clone</text></g><g><title>start_thread (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1237" width="23.0279%" height="15" fill="rgb(231,100,33)"/><text x="77.2221%" y="1247.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1221" width="23.0279%" height="15" fill="rgb(228,126,14)"/><text x="77.2221%" y="1231.50">std::sys::unix::thread::Thread::new::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1205" width="23.0279%" height="15" fill="rgb(215,173,21)"/><text x="77.2221%" y="1215.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1189" width="23.0279%" height="15" fill="rgb(210,6,40)"/><text x="77.2221%" y="1199.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::f..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1173" width="23.0279%" height="15" fill="rgb(212,48,18)"/><text x="77.2221%" y="1183.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1157" width="23.0279%" height="15" fill="rgb(230,214,11)"/><text x="77.2221%" y="1167.50">std::thread::Builder::spawn_unchecked..</text></g><g><title>std::panic::catch_unwind (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1141" width="23.0279%" height="15" fill="rgb(254,105,39)"/><text x="77.2221%" y="1151.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1125" width="23.0279%" height="15" fill="rgb(245,158,5)"/><text x="77.2221%" y="1135.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1109" width="23.0279%" height="15" fill="rgb(249,208,11)"/><text x="77.2221%" y="1119.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1093" width="23.0279%" height="15" fill="rgb(210,39,28)"/><text x="77.2221%" y="1103.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as c..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1077" width="23.0279%" height="15" fill="rgb(211,56,53)"/><text x="77.2221%" y="1087.50">std::thread::Builder::spawn_unchecked..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1061" width="23.0279%" height="15" fill="rgb(226,201,30)"/><text x="77.2221%" y="1071.50">std::sys_common::backtrace::__rust_be..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1045" width="23.0279%" height="15" fill="rgb(239,101,34)"/><text x="77.2221%" y="1055.50">tokio::runtime::blocking::pool::Spawn..</text></g><g><title>tokio::runtime::handle::Handle::enter (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1029" width="23.0279%" height="15" fill="rgb(226,209,5)"/><text x="77.2221%" y="1039.50">tokio::runtime::handle::Handle::enter</text></g><g><title>tokio::runtime::context::enter (1,048 samples, 23.03%)</title><rect x="76.9721%" y="1013" width="23.0279%" height="15" fill="rgb(250,105,47)"/><text x="77.2221%" y="1023.50">tokio::runtime::context::enter</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}::{{closure}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="997" width="23.0279%" height="15" fill="rgb(230,72,3)"/><text x="77.2221%" y="1007.50">tokio::runtime::blocking::pool::Spawn..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1,048 samples, 23.03%)</title><rect x="76.9721%" y="981" width="23.0279%" height="15" fill="rgb(232,218,39)"/><text x="77.2221%" y="991.50">tokio::runtime::blocking::pool::Inner..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,048 samples, 23.03%)</title><rect x="76.9721%" y="965" width="23.0279%" height="15" fill="rgb(248,166,6)"/><text x="77.2221%" y="975.50">tokio::runtime::task::Notified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,048 samples, 23.03%)</title><rect x="76.9721%" y="949" width="23.0279%" height="15" fill="rgb(247,89,20)"/><text x="77.2221%" y="959.50">tokio::runtime::task::raw::RawTask::p..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,048 samples, 23.03%)</title><rect x="76.9721%" y="933" width="23.0279%" height="15" fill="rgb(248,130,54)"/><text x="77.2221%" y="943.50">tokio::runtime::task::harness::Harnes..</text></g><g><title>std::panic::catch_unwind (1,048 samples, 23.03%)</title><rect x="76.9721%" y="917" width="23.0279%" height="15" fill="rgb(234,196,4)"/><text x="77.2221%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,048 samples, 23.03%)</title><rect x="76.9721%" y="901" width="23.0279%" height="15" fill="rgb(250,143,31)"/><text x="77.2221%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,048 samples, 23.03%)</title><rect x="76.9721%" y="885" width="23.0279%" height="15" fill="rgb(211,110,34)"/><text x="77.2221%" y="895.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,048 samples, 23.03%)</title><rect x="76.9721%" y="869" width="23.0279%" height="15" fill="rgb(215,124,48)"/><text x="77.2221%" y="879.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as c..</text></g><g><title>core::ops::function::FnOnce::call_once (1,048 samples, 23.03%)</title><rect x="76.9721%" y="853" width="23.0279%" height="15" fill="rgb(216,46,13)"/><text x="77.2221%" y="863.50">core::ops::function::FnOnce::call_once</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::{{closure}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="837" width="23.0279%" height="15" fill="rgb(205,184,25)"/><text x="77.2221%" y="847.50">tokio::runtime::task::harness::Harnes..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,048 samples, 23.03%)</title><rect x="76.9721%" y="821" width="23.0279%" height="15" fill="rgb(228,1,10)"/><text x="77.2221%" y="831.50">tokio::runtime::task::core::Core&lt;T,S&gt;..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,048 samples, 23.03%)</title><rect x="76.9721%" y="805" width="23.0279%" height="15" fill="rgb(213,116,27)"/><text x="77.2221%" y="815.50">tokio::loom::std::unsafe_cell::Unsafe..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="789" width="23.0279%" height="15" fill="rgb(241,95,50)"/><text x="77.2221%" y="799.50">tokio::runtime::task::core::Core&lt;T,S&gt;..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1,048 samples, 23.03%)</title><rect x="76.9721%" y="773" width="23.0279%" height="15" fill="rgb(238,48,32)"/><text x="77.2221%" y="783.50">&lt;tokio::runtime::blocking::task::Bloc..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="757" width="23.0279%" height="15" fill="rgb(235,113,49)"/><text x="77.2221%" y="767.50">tokio::runtime::thread_pool::worker::..</text></g><g><title>tokio::runtime::thread_pool::worker::run (1,048 samples, 23.03%)</title><rect x="76.9721%" y="741" width="23.0279%" height="15" fill="rgb(205,127,43)"/><text x="77.2221%" y="751.50">tokio::runtime::thread_pool::worker::..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,048 samples, 23.03%)</title><rect x="76.9721%" y="725" width="23.0279%" height="15" fill="rgb(250,162,2)"/><text x="77.2221%" y="735.50">tokio::macros::scoped_tls::ScopedKey&lt;..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1,048 samples, 23.03%)</title><rect x="76.9721%" y="709" width="23.0279%" height="15" fill="rgb(220,13,41)"/><text x="77.2221%" y="719.50">tokio::runtime::thread_pool::worker::..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1,048 samples, 23.03%)</title><rect x="76.9721%" y="693" width="23.0279%" height="15" fill="rgb(249,221,25)"/><text x="77.2221%" y="703.50">tokio::runtime::thread_pool::worker::..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::steal_work (6 samples, 0.13%)</title><rect x="99.8682%" y="677" width="0.1318%" height="15" fill="rgb(215,208,19)"/><text x="100.1182%" y="687.50"></text></g></svg></svg>